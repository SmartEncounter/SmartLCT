<localInterface:CustomWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
        xmlns:Nova_SmartLCT_Behavior="clr-namespace:Nova.SmartLCT.Behavior;assembly=Behavior" 
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"       
        xmlns:localInterface="clr-namespace:Nova.SmartLCT.Interface;assembly=Nova.SmartLCT.Interface.CommonData"        
        xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"  
        xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"   
        xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4"   
        xmlns:local="clr-namespace:SmartLCT" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:Nova_SmartLCT_UI="clr-namespace:Nova.SmartLCT.UI;assembly=Nova.SmartLCT.UI.PropertyPanel" mc:Ignorable="d" x:Class="SmartLCT.StartWindow"
        Title="{DynamicResource Lang_StartWindow_Start}"  Height="651" Width="965" Closed="Window_Closed" ResizeMode="CanMinimize" Background="#FF2D3132" Foreground="#FFB6B2B2" AllowsTransparency="True" WindowStyle="None">
	<localInterface:CustomWindow.Resources>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter1"/>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
		<local:StartWindow_VM x:Key="StartWindow_VMDataSource" d:IsDataSource="True"/>

		<ControlTemplate x:Key="ScrollViewerControlTemplate_Center" TargetType="{x:Type ScrollViewer}">
			<Grid x:Name="Grid" Background="{TemplateBinding Background}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="*"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<Rectangle x:Name="Corner" Grid.Column="1" Fill="#FF303435" Grid.Row="1"/>
				<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
				<ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
				<ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
			</Grid>
		</ControlTemplate>
		<Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="true" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border BorderBrush="#FF6F7374"  BorderThickness="0,1,0,0">
							<Border Background="{DynamicResource MyScrollTruckBackground}" BorderBrush="#FF202123" BorderThickness="0,0,0,1"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarThumbv" TargetType="{x:Type Thumb}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border BorderBrush="#FF4A4B4D" BorderThickness="1,0,0,0">
							<Border Background="{DynamicResource MyScrollTruckBackgroundv}" BorderBrush="#FF202123" BorderThickness="0,0,1,0"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="HorizontalScrollBarBackground" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="Black" Offset="1"/>
			<GradientStop Color="#FF2C2D31"/>
			<GradientStop Color="#FF3E4042" Offset="0.083"/>
			<GradientStop Color="#FF303435" Offset="0.923"/>
			<GradientStop Color="#FF303435" Offset="0.104"/>
		</LinearGradientBrush>

		<LinearGradientBrush x:Key="MyScrollTruckBackground" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="Black" Offset="1"/>
			<GradientStop Color="#FF545454"/>
			<GradientStop Color="#FF4D4E4E" Offset="0.08"/>
			<GradientStop Color="#FF303435" Offset="0.98"/>
			<GradientStop Color="#FF303435" Offset="0.075"/>
			<GradientStop Color="#FF4A4C4D"/>

		</LinearGradientBrush>
		<LinearGradientBrush x:Key="MyScrollTruckBackgroundv" EndPoint="0.5,1" StartPoint="0.5,0">
			<GradientStop Color="Black" Offset="1"/>
			<GradientStop Color="#FF545454"/>
			<GradientStop Color="#FF4D4E4E" Offset="0.08"/>
			<GradientStop Color="#FF303435" Offset="0.98"/>
			<GradientStop Color="#FF303435" Offset="0.075"/>
			<GradientStop Color="#FF4A4C4D"/>
		</LinearGradientBrush>
		<Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="SButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineUp" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="0"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineLeft" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="-90"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineRight" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="90"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style  TargetType="{x:Type ScrollBar}">
			<Setter Property="Background" Value="#FF303435"/>
			<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
			<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollBar}">
						<Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
							<Grid.RowDefinitions>
								<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
								<RowDefinition Height="0.00001*"/>
								<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
							</Grid.RowDefinitions>
							<Button Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="UpArrow" Style="{DynamicResource ButtonStyle_ScrollBarLineUp}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}"/>
							<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
								<Track.DecreaseRepeatButton>
									<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
								</Track.DecreaseRepeatButton>
								<Track.IncreaseRepeatButton>
									<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
								</Track.IncreaseRepeatButton>
								<Track.Thumb>
									<Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper"/>
								</Track.Thumb>
							</Track>
							<Button x:Name="repeatButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{DynamicResource ButtonStyle_ScrollBarLineDown}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="DownArrow" Margin="0,0,0,-1" Background="#FF303435" BorderBrush="{x:Null}" BorderThickness="0.5"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" TargetName="Bg" Value="Gray"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="Orientation" Value="Horizontal">
					<Setter Property="Width" Value="Auto"/>
					<Setter Property="MinWidth" Value="0"/>
					<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
					<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>

					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ScrollBar}">
								<Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
									<Grid.ColumnDefinitions>
										<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
										<ColumnDefinition Width="0.00001*"/>
										<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
									</Grid.ColumnDefinitions>
									<Button Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Style="{DynamicResource ButtonStyle_ScrollBarLineLeft}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"/>
									<Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
										<Track.DecreaseRepeatButton>
											<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
										</Track.DecreaseRepeatButton>
										<Track.IncreaseRepeatButton>
											<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
										</Track.IncreaseRepeatButton>
										<Track.Thumb>
											<Thumb Style="{StaticResource ScrollBarThumbv}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
										</Track.Thumb>
									</Track>
									<Button Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Style="{DynamicResource ButtonStyle_ScrollBarLineRight}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"/>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Background" TargetName="Bg" Value="gray"/>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineDown" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderThickness="0,0.5" BorderBrush="Black">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Margin="5,0,0,0" Fill="Black" HorizontalAlignment="Left">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="180"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<DataTemplate x:Key="DataTemplate_ProductInfoList">
			<Grid Height="71.837" Width="Auto">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="2*"/>
					<ColumnDefinition Width="3*"/>
				</Grid.ColumnDefinitions>
			</Grid>
		</DataTemplate>
		<Style x:Key="ListBoxItemStyle_productInfoList" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBoxItem}">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="Selector.IsSelectionActive" Value="false"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="false"/>
									<Condition Property="IsMouseOver" Value="true"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd"  Value="#FF414141"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="IsMouseOver" Value="true"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd"  Value="Black"/>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<DataTemplate x:Key="DataTemplate_productInfoListBox">
			<Border x:Name="border" HorizontalAlignment="Center" Margin="12,0,2,0" VerticalAlignment="Center" CornerRadius="3" Background="#FF2D3132" BorderThickness="1" BorderBrush="#FF3D3D3D" Width="{Binding Width, Mode=TwoWay}" Height="{Binding Height, Mode=TwoWay}" >
				<Grid RenderTransformOrigin="0,0">
					<Grid.ColumnDefinitions>
						<ColumnDefinition/>
						<ColumnDefinition/>
					</Grid.ColumnDefinitions>
					<Image Grid.Column="0" HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Source="{Binding PicPath, Mode=TwoWay}" Margin="0"/>
					<Label x:Name="label" Grid.Column="1" HorizontalAlignment="Center" MaxWidth="200" VerticalAlignment="Center" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="False" Height="Auto" Width="Auto" Visibility="Visible" Margin="5,0" Grid.Row="1" Content="{Binding Description, Mode=TwoWay}" Foreground="Gray" FontSize="10.667" FontWeight="Bold"/>
					<Rectangle x:Name="rectangle" Stroke="{x:Null}" Width="0.5" HorizontalAlignment="Right" Margin="0,0,-0.25,0">
						<Rectangle.Fill>
							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
								<GradientStop Color="#FF393C3D" Offset="0"/>
								<GradientStop Color="#FF393C3D" Offset="1"/>
								<GradientStop Color="#FF5B5C5C" Offset="0.5"/>
							</LinearGradientBrush>
						</Rectangle.Fill>
					</Rectangle>
				</Grid>
			</Border>
			<DataTemplate.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" TargetName="border" Value="#FF595959"/>
					<Setter Property="Fill" TargetName="rectangle">
						<Setter.Value>
							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
								<GradientStop Color="#FF5B5C5C" Offset="0"/>
								<GradientStop Color="#FF5B5C5C" Offset="1"/>
								<GradientStop Color="#FF303435" Offset="0.5"/>
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
				<Trigger Property="ContentControl.Content" Value="{x:Null}"/>
				<EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
			</DataTemplate.Triggers>
		</DataTemplate>
		<Style x:Key="ListBoxItemStyle_productInfoListBox" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
		</Style>
		<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid Background="Transparent" SnapsToDevicePixels="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="-90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
									<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid Background="Transparent" SnapsToDevicePixels="False">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="180"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
									<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
								<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid Background="Transparent" SnapsToDevicePixels="False">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
									<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderHeaderFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="myOpenBorder"  Padding="{TemplateBinding Padding}" Cursor="Hand" Height="Auto" BorderBrush="{x:Null}">
							<Grid Background="Transparent" SnapsToDevicePixels="False" Margin="0">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="56.5"/>
									<ColumnDefinition/>
								</Grid.ColumnDefinitions>
								<TextBlock x:Name="textBlock" Margin="0" TextWrapping="Wrap" Text="{TemplateBinding Content}" d:LayoutOverrides="Width, Height" Grid.Column="1" VerticalAlignment="Center" FontSize="16" Foreground="#FF818181"/>
								<Button x:Name="button"  Margin="10,3,0,3" Width="25" Height="25" HorizontalAlignment="Left" Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdNewWizard, Mode=OneWay}" IsTabStop="False">
									<Button.Background>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Wizard.png"/>
									</Button.Background>
								</Button>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="myOpenBorder" Value="#FF373B3C"/>
								<Setter Property="Foreground" TargetName="textBlock" Value="Gainsboro"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle_openproject" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="myNewBorder"  Padding="{TemplateBinding Padding}" Cursor="Hand" Height="Auto" Background="#FF2D3132" BorderBrush="{x:Null}" BorderThickness="1">
							<Grid Background="Transparent" SnapsToDevicePixels="False" Height="Auto">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="54.5"/>
									<ColumnDefinition/>
								</Grid.ColumnDefinitions>
								<TextBlock x:Name="textBlock" Margin="0" TextWrapping="Wrap" Text="{TemplateBinding Content}" d:LayoutOverrides="Width, Height" Grid.Column="1" VerticalAlignment="Center" FontSize="16" Foreground="#FF818181"/>
								<Button x:Name="button"  Margin="10.5,3,0,3" Width="28" Height="28" HorizontalAlignment="Left" Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdOpenProject, Mode=OneWay}" IsTabStop="False">
									<Button.Background>
										<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Open.png"/>
									</Button.Background>
								</Button>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>                          
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="myNewBorder" Value="#FF373B3C"/>
								<Setter Property="Foreground" TargetName="textBlock" Value="Gainsboro"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle_newEmptyProject" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="myNewBorder"  Padding="{TemplateBinding Padding}" Cursor="Hand" Height="Auto" Background="#FF2D3132" BorderBrush="{x:Null}" BorderThickness="1">
							<Grid Background="Transparent" SnapsToDevicePixels="False" Height="Auto">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="54.5"/>
									<ColumnDefinition/>
								</Grid.ColumnDefinitions>
								<TextBlock x:Name="textBlock" Margin="0" TextWrapping="Wrap" Text="{TemplateBinding Content}" d:LayoutOverrides="Width, Height" Grid.Column="1" VerticalAlignment="Center" FontSize="16" Foreground="#FF818181"/>
								<Button x:Name="button"  Margin="5,3,0,3" Width="28" Height="28" HorizontalAlignment="Left" Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdNewEmptyProject, Mode=OneWay}" IsTabStop="False">
									<Button.Background>
										<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/New.png"/>
									</Button.Background>
								</Button>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>                          
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="myNewBorder" Value="#FF373B3C"/>
								<Setter Property="Foreground" TargetName="textBlock" Value="Gainsboro"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyle_startWindowselect" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true" Height="Auto" Margin="0,0,0,0.834">
							<DockPanel Margin="0" Height="Auto" d:LayoutOverrides="VerticalAlignment">
								<ToggleButton  x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Height="Auto"/>
								<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</DockPanel>
						</Border>              
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="CommonButtonStyle" TargetType="{x:Type Button}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Padding" Value="2"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="HorizontalAlignment" Value="Center"/>
			<Setter Property="VerticalAlignment" Value="Center"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border BorderBrush="Black" BorderThickness="0" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}"/>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true"/>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="IsPressed" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle2" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid Background="Transparent" SnapsToDevicePixels="False">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
								<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyle_startWindowOpenProject" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true" Height="Auto">
							<DockPanel Height="Auto">
								<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle_openproject}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" Height="Auto"/>
								<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyle_startWindowNewEmptyProjectt" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true" Height="Auto">
							<DockPanel Height="Auto">
								<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle_newEmptyProject}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" Height="Auto"/>
								<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<DataTemplate x:Key="DataTemplate_RecentProjectListBox">
			<Grid x:Name="grid" Height="Auto" Width="230.457">
				<i:Interaction.Triggers>
					<i:EventTrigger EventName="MouseLeftButtonUp">
						<cmd:EventToCommand Command="{Binding DataContext.CmdOpenRecentProject, RelativeSource={RelativeSource AncestorType={x:Type ListBox}, Mode=FindAncestor}}"/>
					</i:EventTrigger>
				</i:Interaction.Triggers>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="0.204*"/>
					<ColumnDefinition Width="0*"/>
					<ColumnDefinition Width="0.796*"/>
				</Grid.ColumnDefinitions>
				<Grid.ToolTip>
					<ToolTip Content="{Binding ProjectPath, Mode=TwoWay}"/>
				</Grid.ToolTip>
				<Image Width="18" Height="18"  VerticalAlignment="Stretch" HorizontalAlignment="Left" Source="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/SmartLCTProjectPic.png" Margin="5,8.5,0,8.5"/>
				<Label x:Name="label" Content="{Binding ProjectName, Mode=TwoWay}" d:LayoutOverrides="Width, GridBox" Grid.Column="1" Background="{x:Null}" Foreground="#FF818181" VerticalAlignment="Stretch" FontSize="13.333" Grid.ColumnSpan="2"/>
			</Grid>
			<DataTemplate.Triggers>
				<Trigger Property="IsMouseOver" Value="True" SourceName="grid">
					<Setter Property="Foreground" TargetName="label" Value="Gainsboro"/>
					<Setter Property="FontSize" TargetName="label" Value="13.333"/>
				</Trigger>
			</DataTemplate.Triggers>
		</DataTemplate>
		<Style x:Key="ListBoxItemStyle_startwindow_Recentproject" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBoxItem}">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Background="#FF2D3132">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" TargetName="Bd" Value="#FF373B3C"/>
								<Setter Property="BorderBrush" TargetName="Bd" Value="#FFAEAEAF"/>
								<Setter Property="Foreground" Value="White"/>
							</Trigger>
						<!--	<Trigger Property="IsSelected" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="#FF373B3C"/>
								<Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
								<Setter Property="Foreground" Value="White"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="Selector.IsSelectionActive" Value="false"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd" Value="#FF373B3C"/>
								<Setter Property="Foreground" Value="White"/>
							</MultiTrigger>  -->
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="White"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="ListBorder" Color="#828790"/>
		<Style x:Key="ListBoxStyle_StartWindow_RecentOpen" TargetType="{x:Type ListBox}">
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
			<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
			<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBox}">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true" Background="#FF2D3132">
							<ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsGrouping" Value="true">
								<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="Custom_Tabtitle" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Border BorderThickness="1" Margin="0,10,0,0" HorizontalAlignment="Left" Width="80" d:LayoutOverrides="HorizontalAlignment">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FF64676C" Offset="0"/>
										<GradientStop Color="#FF595959" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
							</Border>
							<Border BorderThickness="1" Height="30" VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5" CornerRadius="5" HorizontalAlignment="Left" Width="70" d:LayoutOverrides="HorizontalAlignment">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FF64676C" Offset="0"/>
										<GradientStop Color="#FF595959" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
							</Border>
							<Border BorderThickness="1" HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Width="83" CornerRadius="5" d:LayoutOverrides="HorizontalAlignment">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FF64676C" Offset="0"/>
										<GradientStop Color="#FF595959" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
								<Border.LayoutTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform AngleX="45"/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Border.LayoutTransform>
							</Border>
							<Canvas Height="3" Margin="2,0,0,0" VerticalAlignment="Bottom" Background="#FF595959"/>
							<ContentPresenter HorizontalAlignment="Left" Margin="12,3.883,0,5" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Width="64" d:LayoutOverrides="Height"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="Foreground" Value="#FFC8C8C8"/>
		</Style>
		<Style x:Key="ButtonStyle_RecentFile" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Border BorderThickness="1" Margin="0,10,0,0" HorizontalAlignment="Left" Width="80" d:LayoutOverrides="HorizontalAlignment">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FF64676C" Offset="0"/>
										<GradientStop Color="#FF595959" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
							</Border>
							<Border BorderThickness="1" Height="30" VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5" CornerRadius="5" HorizontalAlignment="Left" Width="70" d:LayoutOverrides="HorizontalAlignment">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FF64676C" Offset="0"/>
										<GradientStop Color="#FF595959" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
							</Border>
							<Border BorderThickness="1" HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Width="103" CornerRadius="5" d:LayoutOverrides="HorizontalAlignment">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FF64676C" Offset="0"/>
										<GradientStop Color="#FF595959" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
								<Border.LayoutTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform AngleX="45"/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Border.LayoutTransform>
							</Border>
							<Canvas Height="3" Margin="2,0,0,0" VerticalAlignment="Bottom" Background="#FF595959"/>
							<ContentPresenter HorizontalAlignment="Left" Margin="12,3.883,0,5" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Width="Auto" d:LayoutOverrides="Height"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="Foreground" Value="#FFC8C8C8"/>
		</Style>
		<Style x:Key="ListBoxStyle_startWindow" TargetType="{x:Type ListBox}">
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
			<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
			<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBox}">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
							<ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Template="{DynamicResource ScrollViewerControlTemplate_Center}">
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>
						</Border>
						<ControlTemplate.Triggers>
						
							<Trigger Property="Selector.IsSelected" Value="True">
								<Setter Property="Background" Value="Green"/>
							</Trigger>
						
							<Trigger Property="IsGrouping" Value="true">
								<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<ItemsPanelTemplate x:Key="ItemsPanelTemplate_startWindow_Product">
			<VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
		</ItemsPanelTemplate>
		<Style x:Key="ButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#F3F3F3" Offset="0"/>
			<GradientStop Color="#EBEBEB" Offset="0.5"/>
			<GradientStop Color="#DDDDDD" Offset="0.5"/>
			<GradientStop Color="#CDCDCD" Offset="1"/>
		</LinearGradientBrush>
		<SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
		<Style x:Key="ButtonStyle_forward" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Microsoft_Windows_Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderDefaulted="{TemplateBinding IsDefaulted}" SnapsToDevicePixels="true" VerticalAlignment="Stretch">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Microsoft_Windows_Themes:ButtonChrome>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="RenderDefaulted" TargetName="Chrome" Value="true"/>
							</Trigger>
							<Trigger Property="ToggleButton.IsChecked" Value="true">
								<Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
		</Style>
		<Style x:Key="ListBoxItemStyle2" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
		</Style>
		<Style x:Key="ListBoxItemStyle3" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
			<Setter Property="Margin" Value="0"/>
		</Style>
			<Style x:Key="ListBoxItemStyle22" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBoxItem}">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="true">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
								<Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="Selector.IsSelectionActive" Value="false"/>
								</MultiTrigger.Conditions>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
								<Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
			<Style x:Key="ButtonStyleLeft" TargetType="{x:Type Button}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
				<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="Padding" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" CornerRadius="12" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
								<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="26.667"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true"/>
								<Trigger Property="ToggleButton.IsChecked" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="#ADADAD"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ButtonStyleRight" TargetType="{x:Type Button}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
				<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="Padding" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}" CornerRadius="12" Height="{TemplateBinding Height}">
								<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="26.667" VerticalAlignment="Center" HorizontalAlignment="Center"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true"/>
								<Trigger Property="ToggleButton.IsChecked" Value="true"/>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="#ADADAD"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
 </localInterface:CustomWindow.Resources>
    <Grid DataContext="{Binding Source={StaticResource StartWindow_VMDataSource}}">
    	<Grid.RowDefinitions>
    		<RowDefinition Height="110"/>
    		<RowDefinition/>
    		<RowDefinition Height="175"/>
    	</Grid.RowDefinitions>
    	<Grid Margin="0" Grid.Row="1">
    		<Grid.ColumnDefinitions>
    			<ColumnDefinition/>
    			<ColumnDefinition Width="478"/>
    		</Grid.ColumnDefinitions>
    		<Grid Grid.Column="1">
    			<ListBox BorderBrush="Transparent" SelectedValue="{Binding SelectedRecentProjectFile, Mode=TwoWay}" Margin="53.788,55.5,103.853,110.67" RenderTransformOrigin="0.5,0.5" ItemsSource="{Binding RecentProjectCollection, Mode=TwoWay}"  ItemTemplate="{DynamicResource DataTemplate_RecentProjectListBox}" ItemContainerStyle="{DynamicResource ListBoxItemStyle_startwindow_Recentproject}" Background="#FF2D3132" Style="{DynamicResource ListBoxStyle_StartWindow_RecentOpen}" FontSize="16" TabIndex="3" d:LayoutOverrides="VerticalAlignment">
    				<ListBox.RenderTransform>
    					<TransformGroup>
    						<ScaleTransform/>
    						<SkewTransform AngleX="-0.331"/>
    						<RotateTransform/>
    						<TranslateTransform X="-0.494"/>
    					</TransformGroup>
    				</ListBox.RenderTransform>
    			</ListBox>
    			<Border BorderBrush="#FF414142" BorderThickness="1" Height="33" Margin="45,0,82.5,0" VerticalAlignment="Top">
    				<Border.Background>
    					<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
    						<GradientStop Color="#FF3B3F40" Offset="0"/>
    						<GradientStop Color="#FF373B3C" Offset="1"/>
    						<GradientStop Color="#FF3B3F40" Offset="0.5"/>
    						<GradientStop Color="#FF373B3C" Offset="0.5"/>
    					</LinearGradientBrush>
    				</Border.Background>
    				<TextBlock TextWrapping="Wrap" Text="{DynamicResource Lang_StartWindow_RecentFiles}" VerticalAlignment="Center" Margin="8,0,0,0" FontSize="18.667"/>
    			</Border>
    		</Grid>
    		<Border BorderThickness="0">
    			<Grid>
    				<Grid.RowDefinitions>
    					<RowDefinition Height="137*"/>
    					<RowDefinition Height="46*"/>
    				</Grid.RowDefinitions>
    				<Expander IsExpanded="{Binding IsNewProject}" Header="{DynamicResource Lang_StartWindow_NewWizard}" Margin="55.5,93,69,0" Style="{DynamicResource ExpanderStyle_startWindowselect}" Foreground="#FFF8F8F8" VerticalAlignment="Top" IsTabStop="True" TabIndex="1" Height="35.834"/>
    				<Expander IsExpanded="{Binding IsOpenProject}"  Header="{DynamicResource Lang_StartWindow_Open}" Margin="56.5,133,69,0" Style="{DynamicResource ExpanderStyle_startWindowOpenProject}" Foreground="White" VerticalAlignment="Top" IsTabStop="True" TabIndex="2" Height="40"/>
                    <Expander IsExpanded="{Binding IsNewEmptyProject}" Header="{DynamicResource Lang_StartWindow_NewEmptyProject}" Margin="56.5,53,69,0" Style="{DynamicResource ExpanderStyle_startWindowNewEmptyProjectt}" Foreground="#FFF8F8F8" VerticalAlignment="Top" IsTabStop="True" TabIndex="0" Height="40"/>
                    <Expander IsExpanded="{Binding IsOpenBrightAdjust}"  Header="{DynamicResource Lang_SmartLCT_BrightAdjust}" Margin="56.5,173,69,0" Style="{DynamicResource ExpanderStyle_startWindowOpenProject}" Foreground="White" VerticalAlignment="Top" IsTabStop="True" TabIndex="2" Height="40"/>
                    <Expander IsExpanded="{Binding IsOpenLangSel}"  Header="{DynamicResource Lang_SmartLCT_Language}" Margin="56.5,213,69,0" Style="{DynamicResource ExpanderStyle_startWindowOpenProject}" Foreground="White" VerticalAlignment="Top" IsTabStop="True" TabIndex="2" Height="40"/>
                    <Border BorderBrush="#FF414142" BorderThickness="1" Height="33" Margin="52,0,62,0" VerticalAlignment="Top">
                    	<Border.Background>
                    		<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    			<GradientStop Color="#FF3B3F40" Offset="0"/>
                    			<GradientStop Color="#FF373B3C" Offset="1"/>
                    			<GradientStop Color="#FF3B3F40" Offset="0.5"/>
                    			<GradientStop Color="#FF373B3C" Offset="0.5"/>
                    		</LinearGradientBrush>
                    	</Border.Background>
                    	<TextBlock TextWrapping="Wrap" Text="{DynamicResource Lang_StartWindow_Normal}" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="#FFB6B2B2" FontSize="18.667" Margin="8,0,0,0"/>
                    </Border>
                    <Rectangle HorizontalAlignment="Right" Margin="0,0,-1,0" Grid.RowSpan="2" Width="0.5">
                    	<Rectangle.Fill>
                    		<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    			<GradientStop Color="#FF393C3D" Offset="0"/>
                    			<GradientStop Color="#FF393C3D" Offset="1"/>
                    			<GradientStop Color="#FF5B5C5C" Offset="0.5"/>
                    		</LinearGradientBrush>
                    	</Rectangle.Fill>
                    </Rectangle>
    			</Grid>
    		</Border>
    	</Grid>
    	<Border BorderBrush="Black">
    		<Image Stretch="Fill" Source="{Binding NovaStarPicPath, Mode=TwoWay}"/>
        
    	</Border>
    	<Grid x:Name="Grid_Product" Grid.Row="2" Width="965" Height="175">
        
    		<ListBox   Margin="0" IsManipulationEnabled="True" ItemContainerStyle="{DynamicResource ListBoxItemStyle22}"  Background="#FF373B3C" BorderBrush="{x:Null}" BorderThickness="0.5" FontSize="13.333" Style="{DynamicResource ListBoxStyle_startWindow}" ItemsPanel="{DynamicResource ItemsPanelTemplate_startWindow_Product}" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" SelectedIndex="{Binding SelectedProductIndex, Mode=TwoWay}" ItemsSource="{Binding ProductInfoCollection, Mode=TwoWay}" ItemTemplate="{DynamicResource DataTemplate_productInfoListBox}" VerticalAlignment="Top" Height="150">
    			<i:Interaction.Triggers>
    				<i:EventTrigger EventName="MouseMove">
    					<cmd:EventToCommand Command="{Binding CmdGotFocusWithProductList, Mode=OneWay}"/>
    				</i:EventTrigger>
    				<i:EventTrigger EventName="MouseLeave">
    					<cmd:EventToCommand Command="{Binding CmdLostFocusWithProductList, Mode=OneWay}"/>
    				</i:EventTrigger>
    			</i:Interaction.Triggers>
    		</ListBox>
        
    		<Button Content="&lt;" HorizontalAlignment="Left" Margin="8,20,0,35" Command="{Binding CmdProductForward, Mode=OneWay}" IsCancel="True" FontSize="24" Foreground="Gainsboro" Style="{DynamicResource ButtonStyleLeft}" Width="25" Height="70" BorderBrush="Black" Visibility="{Binding IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}, Mode=TwoWay}">
    			<Button.Background>
    				<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
    					<GradientStop Color="#FF5D5D5D" Offset="0"/>
    					<GradientStop Color="#FF1C1C1C" Offset="1"/>
    				</LinearGradientBrush>
    			</Button.Background>
    			<i:Interaction.Triggers>
    				<i:EventTrigger EventName="MouseMove">
    					<cmd:EventToCommand Command="{Binding CmdGotFocusWithProductList, Mode=OneWay}"/>
    				</i:EventTrigger>
    			</i:Interaction.Triggers>
    		</Button>
    		<Button Content="&gt;" HorizontalAlignment="Right" Margin="0,20,8,35" Command="{Binding CmdProductBack, Mode=OneWay}" IsCancel="True" FontSize="24" Foreground="Gainsboro" Style="{DynamicResource ButtonStyleRight}" Width="25" Height="70" BorderBrush="Black" Visibility="{Binding IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter1}, Mode=TwoWay}">
    			<Button.Background>
    				<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
    					<GradientStop Color="#FF1C1C1C" Offset="0"/>
    					<GradientStop Color="#FF646464" Offset="1"/>
    				</LinearGradientBrush>
    			</Button.Background>
    			<i:Interaction.Triggers>
    				<i:EventTrigger EventName="MouseMove">
    					<cmd:EventToCommand Command="{Binding CmdGotFocusWithProductList, Mode=OneWay}"/>
    				</i:EventTrigger>
    			</i:Interaction.Triggers>
    		</Button>
            <Nova_SmartLCT_UI:ButtonCollectionControl DataContext="{Binding Source={StaticResource StartWindow_VMDataSource}}" HorizontalAlignment="Stretch" Height="Auto" ButtonCollectionRealParams="{Binding ProductInfoCollection, Mode=TwoWay}" VerticalAlignment="Bottom" Width="Auto" ParentWidth="{Binding Width, ElementName=Grid_Product, Mode=TwoWay}" Margin="0,0,0,8" Background="{x:Null}">
            	<i:Interaction.Triggers>
            		<i:EventTrigger EventName="MouseMove">
            			<cmd:EventToCommand Command="{Binding CmdGotFocusWithProductList, Mode=OneWay}"/>
            		</i:EventTrigger>
            		<i:EventTrigger EventName="MouseLeave">
            			<cmd:EventToCommand Command="{Binding CmdLostFocusWithProductList, Mode=OneWay}"/>
            		</i:EventTrigger>
            	</i:Interaction.Triggers>
            </Nova_SmartLCT_UI:ButtonCollectionControl>
        
    	</Grid>
        
    </Grid>
</localInterface:CustomWindow>
