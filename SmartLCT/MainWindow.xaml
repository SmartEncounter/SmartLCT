<localInterface:CustomWindow 
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:my="clr-namespace:Nova.SmartLCT.SmartLCTControl;assembly=SmartLCTControl" 
        xmlns:ii="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4"
        xmlns:local="clr-namespace:SmartLCT" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:localInterface="clr-namespace:Nova.SmartLCT.Interface;assembly=Nova.SmartLCT.Interface.CommonData"    
        xmlns:Nova_SmartLCT_Behavior="clr-namespace:Nova.SmartLCT.Behavior;assembly=Behavior"    
        xmlns:myNumericUD="clr-namespace:Nova.Wpf.Control;assembly=Nova.Wpf.Control.NumericUpDown"  
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"   
        xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"      
        xmlns:Nova_SmartLCT_UI="clr-namespace:Nova.SmartLCT.UI;assembly=Nova.SmartLCT.UI.PropertyPanel" 
        xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" 
        mc:Ignorable="d" x:Class="SmartLCT.MainWindow"  
    
    Title="{Binding WindowDisplayTitle, Mode=OneWay}" Background="#FF232426"  Height="1014" Width="1143" WindowState="Maximized" MouseLeftButtonDown="Window_MouseLeftButtonDown" AllowsTransparency="True" WindowStyle="None" Closed="CustomWindow_Closed">
	<Window.Resources>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
		<my:SmartLCTControl x:Key="SmartLCTControlDataSource" d:IsDataSource="True"/>
		<local:MainWindow_VM x:Key="MainWindow_VMDataSource" d:IsDataSource="True"/>    
        <localInterface:SenderIndexConvertSenderName x:Key="senderIndexConvertSenderName"/>
        <localInterface:PortIndexConvertPortName x:Key="portIndexConvertPortName"/>
        <localInterface:RectConvertString x:Key="rectConvertString"/>
        <localInterface:IsOverLoadConvertColor x:Key="isOverLoadConvertColor"/>
        <localInterface:IsSelectedConvertColor x:Key="isSelectedConvertColor"/>
        <localInterface:IsSelectedConvertMouseOverColor x:Key="isSelectedConvertMouseOverColor"/>
        <localInterface:IsOverLoadConvertStr x:Key="isOverLoadConvertStr"></localInterface:IsOverLoadConvertStr>   
        <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>   
        <localInterface:ConnectIndexConvertDeleteBtVisible x:Key="connectIndexConvertDeleteBtVisible"></localInterface:ConnectIndexConvertDeleteBtVisible>
        <localInterface:SenderRectConvertArea x:Key="senderRectConvertArea"></localInterface:SenderRectConvertArea>
        <localInterface:PortRectConvertArea x:Key="portRectConvertArea"></localInterface:PortRectConvertArea>
        <localInterface:SizeConvertString x:Key="sizeConvertString"></localInterface:SizeConvertString>
        
        <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToolBar}">
                        <Border CornerRadius="2" BorderThickness="1" Background="Transparent" BorderBrush="{x:Null}">
                            <ToolBarPanel IsItemsHost="true" Margin="0,1,2,2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="bButtonFocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
    	<LinearGradientBrush x:Key="bButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        	<GradientStop Color="#F3F3F3" Offset="0"/>
        	<GradientStop Color="#EBEBEB" Offset="0.5"/>
        	<GradientStop Color="#DDDDDD" Offset="0.5"/>
        	<GradientStop Color="#CDCDCD" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="bButtonNormalBorder" Color="#FF707070"/>
        <Style TargetType="{x:Type Button}">
        	<Setter Property="FocusVisualStyle" Value="{StaticResource bButtonFocusVisual}"/>
        	<Setter Property="Background" Value="{StaticResource bButtonNormalBackground}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource bButtonNormalBorder}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Padding" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Button}">
        				<Border x:Name="border" BorderBrush="Black" BorderThickness="1" CornerRadius="3">
        					<Border.Background>
        						<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
									<GradientStop Color="#FF3995DE" Offset="0"/>
        									<GradientStop Color="#FF057AD7" Offset="1"/>
        									<GradientStop Color="#FF057AD7" Offset="0.525"/>
        									<GradientStop Color="#FF3995DE" Offset="0.495"/>
        						</LinearGradientBrush>
        					</Border.Background>
        					<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsMouseOver" Value="True">
        						<Setter Property="Background" TargetName="border">
        							<Setter.Value>
        								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        								<GradientStop Color="#FF75ECF2" Offset="0"/>
        							<GradientStop Color="#FF19E0E7" Offset="1"/>
        							<GradientStop Color="#FF19E0E7" Offset="0.5"/>
        							<GradientStop Color="#FF75ECF2" Offset="0.495"/>
        								</LinearGradientBrush>
        							</Setter.Value>
        						</Setter>
        					</Trigger>
        					<Trigger Property="IsKeyboardFocused" Value="true"/>
        					<Trigger Property="ToggleButton.IsChecked" Value="true"/>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="#ADADAD"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>

        <Style x:Key="myNumericUDBackground"  TargetType="{x:Type myNumericUD:NumericUpDown}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FF616161" Offset="0"/>
                        <GradientStop Color="#FF585858" Offset="1"/>
                        <GradientStop Color="#FF616161" Offset="0.495"/>
                        <GradientStop Color="#FE585858" Offset="0.5"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        
        <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
        <!-- 应该在此定义资源字典条目。-->

        <ControlTemplate x:Key="ScrollViewerControlTemplate_Center"  TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle x:Name="Corner" Grid.Column="1" Fill="#FF303435" Grid.Row="1"/>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
            </Grid>
        </ControlTemplate>
        <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="true" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border BorderBrush="#FF6F7374"  BorderThickness="0,1,0,0">
                            <Border Background="{DynamicResource MyScrollTruckBackground}" BorderBrush="#FF202123" BorderThickness="0,0,0,1"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumbv" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border BorderBrush="#FF4A4B4D" BorderThickness="1,0,0,0">
                            <Border Background="{DynamicResource MyScrollTruckBackgroundv}" BorderBrush="#FF202123" BorderThickness="0,0,1,0"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="HorizontalScrollBarBackground" EndPoint="1,0.5" StartPoint="0,0.5">
            <GradientStop Color="Black" Offset="1"/>
            <GradientStop Color="#FF2C2D31"/>
            <GradientStop Color="#FF3E4042" Offset="0.083"/>
            <GradientStop Color="#FF303435" Offset="0.923"/>
            <GradientStop Color="#FF303435" Offset="0.104"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="MyScrollTruckBackground" EndPoint="1,0.5" StartPoint="0,0.5">
            <GradientStop Color="Black" Offset="1"/>
            <GradientStop Color="#FF545454"/>
            <GradientStop Color="#FF4D4E4E" Offset="0.08"/>
            <GradientStop Color="#FF303435" Offset="0.98"/>
            <GradientStop Color="#FF303435" Offset="0.075"/>
            <GradientStop Color="#FF4A4C4D"/>

        </LinearGradientBrush>
        <LinearGradientBrush x:Key="MyScrollTruckBackgroundv" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="1"/>
            <GradientStop Color="#FF545454"/>
            <GradientStop Color="#FF4D4E4E" Offset="0.08"/>
            <GradientStop Color="#FF303435" Offset="0.98"/>
            <GradientStop Color="#FF303435" Offset="0.075"/>
            <GradientStop Color="#FF4A4C4D"/>
        </LinearGradientBrush>
        <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineUp" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
                            <ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineLeft" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
                            <ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineRight" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
                            <ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style  TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="#FF303435"/>
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            </Grid.RowDefinitions>
                            <Button Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="UpArrow" Style="{DynamicResource ButtonStyle_ScrollBarLineUp}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}"/>
                            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper"/>
                                </Track.Thumb>
                            </Track>
                            <Button x:Name="repeatButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{DynamicResource ButtonStyle_ScrollBarLineDown}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="DownArrow" Margin="0,0,0,-1" Background="#FF303435" BorderBrush="{x:Null}" BorderThickness="0.5"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bg" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="MinWidth" Value="0"/>
                    <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                        <ColumnDefinition Width="0.00001*"/>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    </Grid.ColumnDefinitions>
                                    <Button Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Style="{DynamicResource ButtonStyle_ScrollBarLineLeft}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"/>
                                    <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumbv}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
                                        </Track.Thumb>
                                    </Track>
                                    <Button Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Style="{DynamicResource ButtonStyle_ScrollBarLineRight}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" TargetName="Bg" Value="gray"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineDown" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="0,0.5" BorderBrush="Black">
                            <ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Margin="5,0,0,0" Fill="Black" HorizontalAlignment="Left">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ItemsPanelTemplate x:Key="ItemsPanelTemplate_GuideTwo_ReceiveSize">
            <StackPanel IsItemsHost="True" Background="#FF4B4B4B"/>
        </ItemsPanelTemplate>
        <Style x:Key="ComboBoxItemStyle_GuideTwo_ReceiveSize" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="3,0,3,0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Width="Auto">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                <!--<Setter Property="Width" TargetName="Bd" Value="255"/>-->
                                <Setter Property="Background" TargetName="Bd" Value="#FF373B3C"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="DataTemplate_GuideTwo_ReceiveSize">
            <Grid Width="Auto">
                <TextBlock Margin="0" TextWrapping="Wrap" Text="{Binding DisplayName}" d:LayoutOverrides="Width, Height" Foreground="#FFDCDCDC"/>
            </Grid>
        </DataTemplate>
        
        <Style x:Key="CComboBoxFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="CButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#F3F3F3" Offset="0"/>
            <GradientStop Color="#EBEBEB" Offset="0.5"/>
            <GradientStop Color="#DDDDDD" Offset="0.5"/>
            <GradientStop Color="#CDCDCD" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="CButtonNormalBorder" Color="#FF707070"/>
        <Style x:Key="ComboBoxStyle_GuideTwo" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource CComboBoxFocusVisual}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{StaticResource CButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource CButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="4,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Microsoft_Windows_Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton Foreground="#FFDCDCDC"  BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ComboBoxReadonlyToggleButton}"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="3"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Geometry x:Key="CDownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
        <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid Width="Auto" Background="{TemplateBinding Background}">
                            <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
                                <Path x:Name="Arrow" Data="{StaticResource CDownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FF616161" Offset="0"/>
                        <GradientStop Color="#FF585858" Offset="1"/>
                        <GradientStop Color="#FF616161" Offset="0.495"/>
                        <GradientStop Color="#FE585858" Offset="0.5"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MyToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <TextBlock TextWrapping="Wrap" Foreground="WhiteSmoke"  Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Width" TargetName="border" Value="25"/>
                                <Setter Property="Height" TargetName="border" Value="25"/>
                                <Setter Property="Background" TargetName="border" Value="Silver"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFB0D1F6"/>
                                <Setter Property="Width" TargetName="border" Value="25"/>
                                <Setter Property="Height" TargetName="border" Value="25"/>
                            </Trigger>-->
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="True" SourceName="grid">
                                <Setter Property="Background" TargetName="grid" Value="#FFEF8E8E"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="Sty_LangMenuItem" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="MenuItem.Command" Value="{Binding DataContext.CmdChangedLang, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Menu}}}" />
            <Setter Property="MenuItem.CommandParameter" Value="{Binding LangFlag}" />
            <Setter Property="MenuItem.IsChecked" Value="{Binding IsSelected}" />
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="7,2,8,3"/>
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="7,2,8,3"/>
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,3,2,3"/>
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,3,2,3"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="DT_LangItem">
			<Grid Width="Auto">
                <TextBlock x:Name="myl"  Margin="0,0,1.333,0.163"  TextWrapping="Wrap" Text="{Binding LangDisplayName}" d:LayoutOverrides="Width, Height">
         
                </TextBlock>
			</Grid>
		</DataTemplate>
		<LinearGradientBrush x:Key="MenuItemSelectionFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#34C5EBFF" Offset="0"/>
			<GradientStop Color="#3481D8FF" Offset="1"/>
		</LinearGradientBrush>
		<Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
		<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
			<Grid SnapsToDevicePixels="true">
				<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
				<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
				<Grid x:Name="grid">
					<Grid.Background>
						<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
							<GradientStop Color="#FF818181" Offset="0"/>
							<GradientStop Color="#FF818181" Offset="1"/>
							<GradientStop Color="#FF818181" Offset="0.005"/>
							<GradientStop Color="#FF4F4F4F" Offset="0.01"/>
							<GradientStop Color="#FF818181" Offset="0.995"/>
							<GradientStop Color="#FF4F4F4F" Offset="0.99"/>
						</LinearGradientBrush>
					</Grid.Background>
					<Grid.ColumnDefinitions>
						<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="4"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="37"/>
						<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="17"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
					<Border x:Name="GlyphPanel" BorderBrush="{x:Null}" BorderThickness="0" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
						<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
					</Border>
					<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" OpacityMask="Black"/>
					<TextBlock x:Name="textBlock" Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" Foreground="#FF9D9D9D"/>
				</Grid>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="true">
					<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="true">
					<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}"/>
					<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
					<Setter Property="Background" TargetName="grid" Value="#FF6E6E6E"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="#FF9D9D9D"/>
					<Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
					<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
					<Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
					<Setter Property="Foreground" TargetName="textBlock" Value="#FF9D9D9D"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
		<LinearGradientBrush x:Key="MenuItemPressedFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#28717070" Offset="0"/>
			<GradientStop Color="#50717070" Offset="0.75"/>
			<GradientStop Color="#90717070" Offset="1"/>
		</LinearGradientBrush>
		<SolidColorBrush x:Key="SubMenuBackgroundBrush" Color="#FFF5F5F5"/>
		<Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
		<Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
			<Setter Property="ClickMode" Value="Hover"/>
			<Setter Property="MinWidth" Value="0"/>
			<Setter Property="MinHeight" Value="0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<DockPanel Background="Transparent" SnapsToDevicePixels="true">
							<Rectangle x:Name="R1" DockPanel.Dock="Right" Fill="Transparent" Width="1"/>
							<Rectangle x:Name="B1" DockPanel.Dock="Bottom" Fill="Transparent" Height="1"/>
							<Rectangle x:Name="L1" DockPanel.Dock="Left" Fill="Transparent" Width="1"/>
							<Rectangle x:Name="T1" DockPanel.Dock="Top" Fill="Transparent" Height="1"/>
							<ContentPresenter x:Name="ContentContainer" HorizontalAlignment="Center" Margin="2,2,2,2" VerticalAlignment="Center"/>
						</DockPanel>
						<ControlTemplate.Triggers>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Fill" TargetName="R1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
								<Setter Property="Fill" TargetName="B1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
								<Setter Property="Fill" TargetName="L1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
								<Setter Property="Fill" TargetName="T1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
								<Setter Property="Margin" TargetName="ContentContainer" Value="3,3,1,1"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
		<Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
		<Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
			<Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
			<Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollViewer}">
						<Grid SnapsToDevicePixels="true">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<Border Grid.Column="0" Grid.Row="1">
								<ScrollContentPresenter Margin="{TemplateBinding Padding}"/>
							</Border>
							<RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
								<RepeatButton.Visibility>
									<MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
										<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
									</MultiBinding>
								</RepeatButton.Visibility>
								<Path Data="{StaticResource UpArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
							</RepeatButton>
							<RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
								<RepeatButton.Visibility>
									<MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
										<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
									</MultiBinding>
								</RepeatButton.Visibility>
								<Path Data="{StaticResource DownArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
							</RepeatButton>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}" TargetType="{x:Type ContentControl}">
			<Border BorderBrush="#FF959595" BorderThickness="1" Background="{StaticResource SubMenuBackgroundBrush}">
				<Grid>
					<Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Margin="2" RadiusY="2" RadiusX="2" Width="28"/>
					<Rectangle Fill="#E2E3E3" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
					<Rectangle Fill="White" HorizontalAlignment="Left" Margin="31,2,0,2" Width="1"/>
					<ContentPresenter Grid.ColumnSpan="2" Margin="1,0"/>
				</Grid>
			</Border>
		</ControlTemplate>
		<ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
			<Grid SnapsToDevicePixels="true">
				<Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
				<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
				<Rectangle x:Name="InnerBorder" Margin="2"/>
				<DockPanel>
					<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
					<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
					<ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
				</DockPanel>
				<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
					<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
						<ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}" Foreground="White">
							<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0" Background="Black">
										<Rectangle Fill="#FF4F4F4F" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}" StrokeThickness="0"/>
									</Canvas>
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
								</Grid>
							</ScrollViewer>
						</ContentControl>
					</Microsoft_Windows_Themes:SystemDropShadowChrome>
				</Popup>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsSuspendingPopupAnimation" Value="true">
					<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
				</Trigger>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="true">
					<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
					<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
					<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="true">
					<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
					<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
				</Trigger>
				<Trigger Property="IsKeyboardFocused" Value="true">
					<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
					<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
				</Trigger>
				<Trigger Property="IsSubmenuOpen" Value="true">
					<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
					<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="#FF9A9A9A"/>
					<Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
		<ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
			<Grid SnapsToDevicePixels="true">
				<Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
				<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
				<Rectangle x:Name="InnerBorder" Margin="2"/>
				<DockPanel>
					<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
					<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
					<ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
				</DockPanel>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="true">
					<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="true">
					<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
					<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
				</Trigger>
				<Trigger Property="IsKeyboardFocused" Value="true">
					<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
					<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="#FF9A9A9A"/>
					<Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
		<Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
		<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
			<Grid SnapsToDevicePixels="true">
				<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
				<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2" Stroke="Transparent" StrokeThickness="1"/>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="4"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="37"/>
						<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="17"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
					<Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
						<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
					</Border>
					<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" Visibility="Collapsed"/>
					<Path Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{TemplateBinding Foreground}" Margin="4,0,0,0" VerticalAlignment="Center"/>
				</Grid>
				<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
					<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
						<ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
							<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas HorizontalAlignment="Stretch" Height="Auto" VerticalAlignment="Stretch" Width="Auto" Background="#FF4F4F4F">
										<Rectangle Fill="#FF4F4F4F" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
									</Canvas>
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
								</Grid>
							</ScrollViewer>
						</ContentControl>
					</Microsoft_Windows_Themes:SystemDropShadowChrome>
				</Popup>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsSuspendingPopupAnimation" Value="true">
					<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="true">
					<Setter Property="Stroke" TargetName="InnerBorder" Value="#D1DBF4FF"/>
				</Trigger>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="true">
					<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
					<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
					<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="true">
					<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}"/>
					<Setter Property="Stroke" TargetName="Bg" Value="#8571CBF1"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="#FF9A9A9A"/>
					<Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
					<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
					<Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
		<SolidColorBrush x:Key="ToolBarButtonHoverBorder" Color="#3399FF"/>
		<SolidColorBrush x:Key="ToolBarButtonHover" Color="#C2E0FF"/>
		<SolidColorBrush x:Key="ToolBarButtonPressedBorder" Color="#3399FF"/>
		<SolidColorBrush x:Key="ToolBarButtonPressed" Color="#99CCFF"/>
		<Style x:Key="CommonButtonStyle" TargetType="{x:Type Button}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Padding" Value="2"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="HorizontalAlignment" Value="Center"/>
			<Setter Property="VerticalAlignment" Value="Center"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}"/>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true"/>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="IsPressed" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

        <Style x:Key="ToolButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="Black" BorderThickness="0" Background="{TemplateBinding Background}" Height="24" Width="24"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true"/>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="IsPressed" Value="true"/>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CommonBigButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="Black" BorderThickness="0" Height="40" Background="{TemplateBinding Background}" Width="40"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true"/>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="IsPressed" Value="true"/>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type localInterface:WarnControl}">
            <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localInterface:WarnControl}">
                        <Canvas x:Name="warmborder"  Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"  Background="{TemplateBinding Background}">
                        </Canvas>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type localInterface:MyTreeViewSenderButton}">
            <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localInterface:MyTreeViewSenderButton}">
                        <Grid>
                            <Button Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdSelectedTreeViewValueWithSender, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}" Height="18" BorderThickness="0.5"  BorderBrush="#FF514D4E" HorizontalAlignment="Left"  Name="mySender"  Background="#FF303435" Width="{x:Static localInterface:SmartLCTViewModeBase.SenderMaxLoadSize}">
                            </Button>
                            <Button Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdSelectedTreeViewValueWithSender, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}"  Height="18" BorderThickness="0.5,0.5,0,0.5"  BorderBrush="#FF514D4E" HorizontalAlignment="Left" Name="mySenderLoad"  Background="#FF23A9C2">
                                <Button.Width>
                                    <MultiBinding Converter="{StaticResource senderRectConvertArea}" ConverterParameter="senderPara">
                                        <Binding Path="MaxLoadArea"></Binding>
                                        <Binding Path="LoadSize"></Binding>
                                    </MultiBinding>
                                </Button.Width>
                            </Button>
                            <TextBlock Text="{Binding SenderIndex,Converter={StaticResource senderIndexConvertSenderName}}" HorizontalAlignment="Center" VerticalAlignment="Center" Canvas.Left="230" Canvas.Top="0" Foreground="White" ></TextBlock>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="mySender"></Setter>
                                <Setter Property="BorderThickness" Value="1" TargetName="mySender"></Setter>
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="mySenderLoad"></Setter>
                                <Setter Property="BorderThickness" Value="1,1,0,1" TargetName="mySenderLoad"></Setter>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">                
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="mySender"></Setter>
                                <Setter Property="BorderThickness" Value="1" TargetName="mySender"></Setter>
                                <Setter Property="Background" Value="#FF1F1F1F" TargetName="mySender"></Setter>
								<Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="mySenderLoad"></Setter>
                                <Setter Property="BorderThickness" Value="1,1,0,1" TargetName="mySenderLoad"></Setter>
                            </Trigger>
                            <Trigger Property="IsOverLoad" Value="True">
                                <Setter Property="Background"  Value="#FFFC3A3A" TargetName="mySender"/>
                                <Setter Property="Background" Value="#FFFC3A3A" TargetName="mySenderLoad"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>


                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type localInterface:MyTreeViewPortButton}">
            <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localInterface:MyTreeViewPortButton}">
                        <Grid>
                            <Button Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdSelectedTreeViewValueWithPort, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}" Height="18" BorderThickness="0.5"  BorderBrush="#FF514D4E" HorizontalAlignment="Left"  Name="myPort"  Background="#FF303435" Width="{x:Static localInterface:SmartLCTViewModeBase.PortMaxLoadSize}">
                            </Button>
                            <Button Style="{DynamicResource CommonButtonStyle}" Command="{Binding CmdSelectedTreeViewValueWithPort, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}"  Height="18" BorderThickness="0.5,0.5,0,0.5"  BorderBrush="#FF514D4E" HorizontalAlignment="Left" Name="myPortLoad"  Background="#FF23A9C2">
                                <Button.Width>
                                    <MultiBinding Converter="{StaticResource portRectConvertArea}" ConverterParameter="portPara">
                                        <Binding Path="MaxLoadArea"></Binding>
                                        <Binding Path="LoadSize"></Binding>
                                    </MultiBinding>
                                </Button.Width>
                            </Button>
                            <TextBlock Text="{Binding PortIndex,Converter={StaticResource portIndexConvertPortName}}" HorizontalAlignment="Center" VerticalAlignment="Center" Canvas.Left="230" Canvas.Top="0" Foreground="White" ></TextBlock>
                       
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="myPort"></Setter>
                                <Setter Property="BorderThickness" Value="1" TargetName="myPort"></Setter>
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="myPortLoad"></Setter>
                                <Setter Property="BorderThickness" Value="1,1,0,1" TargetName="myPortLoad"></Setter>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="myPort"></Setter>
                                <Setter Property="BorderThickness" Value="1" TargetName="myPort"></Setter>
								<Setter Property="Background" Value="#FF1F1F1F" TargetName="myPort"></Setter>
                                <Setter Property="BorderBrush" Value="#FFA0A0A0" TargetName="myPortLoad"></Setter>
                                <Setter Property="BorderThickness" Value="1,1,0,1" TargetName="myPortLoad"></Setter>
                            </Trigger>
                            <Trigger Property="IsOverLoad" Value="True">
                                <Setter Property="Background" TargetName="myPort" Value="#FFFC3A3A"/>
                                <Setter Property="Background" TargetName="myPortLoad" Value="#FFFC3A3A"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
           

                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabControlScreenButtonStyle" TargetType="{x:Type Button}">
        	<Setter Property="Background" Value="Red"/>
        	<Setter Property="BorderBrush" Value="red"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Padding" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="Black" BorderThickness="0" Background="{x:Null}">
        					<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="White" Background="{x:Null}"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FF818181"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="TabItemFocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="TabControlNormalBorderBrush" Color="#8C8E94"/>
        <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        	<GradientStop Color="#F3F3F3" Offset="0"/>
        	<GradientStop Color="#EBEBEB" Offset="0.5"/>
        	<GradientStop Color="#DDDDDD" Offset="0.5"/>
        	<GradientStop Color="#CDCDCD" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TabItemHotBackground" EndPoint="0,1" StartPoint="0,0">
        	<GradientStop Color="#EAF6FD" Offset="0.15"/>
        	<GradientStop Color="#D9F0FC" Offset=".5"/>
        	<GradientStop Color="#BEE6FD" Offset=".5"/>
        	<GradientStop Color="#A7D9F5" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItemSelectedBackground" Color="#F9F9F9"/>
        <SolidColorBrush x:Key="TabItemHotBorderBrush" Color="#3C7FB1"/>
        <SolidColorBrush x:Key="TabItemDisabledBackground" Color="#F4F4F4"/>
        <SolidColorBrush x:Key="TabItemDisabledBorderBrush" Color="#FFC9C7BA"/>
        <Style x:Key="MenuItemStyleParent" TargetType="{x:Type MenuItem}">
        	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        	<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        	<Style.Triggers>
        		<Trigger Property="Role" Value="TopLevelHeader">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="TopLevelItem">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuHeader">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuItem">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        		</Trigger>
        	</Style.Triggers>
        </Style>
        <Style  TargetType="{x:Type MenuItem}">
        	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        	<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        	<Style.Triggers>
        		<Trigger Property="Role" Value="TopLevelHeader">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="TopLevelItem">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuHeader">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuItem">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        		</Trigger>
        	</Style.Triggers>
        </Style>
        <Style x:Key="TabControlStyle_MainWinow_Environment" TargetType="{x:Type TabControl}">
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="Padding" Value="4,4,4,4"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        	<Setter Property="Background" Value="#F9F9F9"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TabControl}">
        				<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
        					<Grid.ColumnDefinitions>
        						<ColumnDefinition x:Name="ColumnDefinition0"/>
        						<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
        					</Grid.ColumnDefinitions>
        					<Grid.RowDefinitions>
        						<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
        						<RowDefinition x:Name="RowDefinition1" Height="*"/>
        					</Grid.RowDefinitions>
        					<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,0,0,238.2" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" HorizontalAlignment="Left" Width="23" Height="Auto" VerticalAlignment="Stretch" d:LayoutOverrides="VerticalMargin"/>
        					<Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="0" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Margin="0.8,3.3,0,0" Grid.RowSpan="2">
        						<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="TabStripPlacement" Value="Bottom">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Left">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Right">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="TabItemStyle1" TargetType="{x:Type TabItem}">
        	<Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}"/>
        	<Setter Property="Foreground" Value="Black"/>
        	<Setter Property="Padding" Value="6,1,6,1"/>
        	<Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        	<Setter Property="VerticalContentAlignment" Value="Stretch"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TabItem}">
        				<Grid SnapsToDevicePixels="true">
        					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Padding="6,0">
        						<Border.Background>
        							<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
        								<GradientStop Color="#FFF3F3F3" Offset="0"/>
        								<GradientStop Color="#FFEBEBEB" Offset="0.5"/>
        								<GradientStop Color="#FFDDDDDD" Offset="0.5"/>
        								<GradientStop Color="#FFCDCDCD" Offset="1"/>
        							</LinearGradientBrush>
        						</Border.Background>
        						<ContentPresenter x:Name="Content" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Height="Auto" VerticalAlignment="Center"/>
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Background" TargetName="Bd">
        							<Setter.Value>
        								<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
        									<GradientStop Color="#EAF6FD" Offset="0.15"/>
        									<GradientStop Color="#D9F0FC" Offset=".5"/>
        									<GradientStop Color="#BEE6FD" Offset=".5"/>
        									<GradientStop Color="#A7D9F5" Offset="1"/>
        								</LinearGradientBrush>
        							</Setter.Value>
        						</Setter>
        					</Trigger>
        					<Trigger Property="IsSelected" Value="true">
        						<Setter Property="Panel.ZIndex" Value="1"/>
        						<Setter Property="Background" TargetName="Bd" Value="#FF8F8F8F"/>
        					</Trigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsSelected" Value="false"/>
        							<Condition Property="IsMouseOver" Value="true"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TabItemHotBorderBrush}"/>
        					</MultiTrigger>
        					<Trigger Property="TabStripPlacement" Value="Bottom">
        						<Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Left">
        						<Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Right">
        						<Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1"/>
        					</Trigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsSelected" Value="true"/>
        							<Condition Property="TabStripPlacement" Value="Top"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="Margin" Value="-2,-2,-2,-1"/>
        						<Setter Property="Margin" TargetName="Content" Value="0,0,0,1"/>
        					</MultiTrigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsSelected" Value="true"/>
        							<Condition Property="TabStripPlacement" Value="Bottom"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="Margin" Value="-2,-1,-2,-2"/>
        						<Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
        					</MultiTrigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsSelected" Value="true"/>
        							<Condition Property="TabStripPlacement" Value="Left"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="Margin" Value="-2,-2,-1,-2"/>
        						<Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
        					</MultiTrigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsSelected" Value="true"/>
        							<Condition Property="TabStripPlacement" Value="Right"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="Margin" Value="-1,-2,-2,-2"/>
        						<Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
        					</MultiTrigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItemDisabledBackground}"/>
        						<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TabItemDisabledBorderBrush}"/>
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="Padding" Value="4,4,4,4"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        	<Setter Property="Background" Value="#F9F9F9"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TabControl}">
        				<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
        					<Grid.ColumnDefinitions>
        						<ColumnDefinition x:Name="ColumnDefinition0"/>
        						<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
        					</Grid.ColumnDefinitions>
        					<Grid.RowDefinitions>
        						<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
        						<RowDefinition x:Name="RowDefinition1" Height="*"/>
        					</Grid.RowDefinitions>
        					<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
        					<Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
        						<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="TabStripPlacement" Value="Bottom">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Left">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Right">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ButtonFocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
        <Style x:Key="ButtonStyle_tabHeader" TargetType="{x:Type Button}">
        	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Padding" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Button}">
        				<Border BorderBrush="{x:Null}" BorderThickness="0" VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
        					<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" Foreground="Gainsboro" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Margin="0"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsKeyboardFocused" Value="true"/>
        					<Trigger Property="ToggleButton.IsChecked" Value="true"/>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="#ADADAD"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <DataTemplate x:Key="DataTemplate_tabHeader">
        	<Grid Height="Auto" Width="Auto" Background="{x:Null}" Margin="0" VerticalAlignment="Stretch">
        		<Grid.ColumnDefinitions>
        			<ColumnDefinition Width="3*"/>
        			<ColumnDefinition Width="*"/>
        		</Grid.ColumnDefinitions>
                <Button Command="{Binding CmdNewLayer, Source={StaticResource MainWindow_VMDataSource}}" Content="{Binding DisplayName, Mode=TwoWay}"  CommandParameter="{Binding}" d:LayoutOverrides="Height" Style="{DynamicResource ButtonStyle_tabHeader}" HorizontalAlignment="Stretch" Background="{x:Null}" Margin="6,0"/>
                <Button Content="Button" Style="{DynamicResource CommonButtonStyle}" Visibility="{Binding ConnectedIndex,Converter={StaticResource connectIndexConvertDeleteBtVisible},Mode=TwoWay}"  Command="{Binding CmdDeleteLayer, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}" Width="20" Height="20" Grid.Column="1">
                    <Button.Background>
                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/DeleteScreen.png"/>
                    </Button.Background>
				    <i:Interaction.Behaviors>
                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                <ImageBrush/>
                            </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                            <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/DeleteScreen.png"/>
                            </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                            <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/DeleteScreen.png"/>
                            </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                    </i:Interaction.Behaviors>
                </Button>
                <Button HorizontalAlignment="Left" Width="6" d:LayoutOverrides="Height" Style="{DynamicResource ButtonStyle_tabHeader}" Background="{x:Null}" Command="{Binding CmdNewLayer, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}"/>
                <Button Content="" Margin="0" d:LayoutOverrides="Height" CommandParameter="{Binding}" Command="{Binding CmdNewLayer, Source={StaticResource MainWindow_VMDataSource}}" Background="{x:Null}" Width="6" HorizontalAlignment="Right" BorderThickness="0" BorderBrush="{x:Null}" Style="{DynamicResource ButtonStyle_tabHeader}"/>
            </Grid>
        	<DataTemplate.Triggers>
        		<Trigger Property="ContentControl.Content" Value="{x:Null}"/>
        	</DataTemplate.Triggers>
        </DataTemplate>
        <ItemsPanelTemplate x:Key="ItemsPanelTemplate_tabHeader">
        	<StackPanel IsItemsHost="True"/>
        </ItemsPanelTemplate>
        <Style x:Key="TabControlStyle_tabHeader" TargetType="{x:Type TabControl}">
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="Padding" Value="4,4,4,4"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        	<Setter Property="Background" Value="#F9F9F9"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TabControl}">
        				<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
        					<Grid.ColumnDefinitions>
        						<ColumnDefinition x:Name="ColumnDefinition0"/>
        						<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
        					</Grid.ColumnDefinitions>
        					<Grid.RowDefinitions>
        						<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
        						<RowDefinition x:Name="RowDefinition1" Height="*"/>
        					</Grid.RowDefinitions>
        					<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
        					<Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
        						<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        					</Border>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="TabStripPlacement" Value="Bottom">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Left">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
        					</Trigger>
        					<Trigger Property="TabStripPlacement" Value="Right">
        						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
        						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
        						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
        						<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
        						<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
        						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
        						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
        						<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <ControlTemplate x:Key="ComponentResourceKey2" TargetType="{x:Type MenuItem}">
        	<Grid SnapsToDevicePixels="true">
        		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
        		<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
        		<Grid>
        			<Grid.ColumnDefinitions>
        				<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
        				<ColumnDefinition Width="4"/>
        				<ColumnDefinition Width="*"/>
        				<ColumnDefinition Width="37"/>
        				<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
        				<ColumnDefinition Width="17"/>
        			</Grid.ColumnDefinitions>
        			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
        			<Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
        				<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
        			</Border>
        			<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        			<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}"/>
        		</Grid>
        	</Grid>
        	<ControlTemplate.Triggers>
        		<Trigger Property="Icon" Value="{x:Null}">
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="IsChecked" Value="true">
        			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="IsHighlighted" Value="true">
        			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}"/>
        			<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
        		</Trigger>
        		<Trigger Property="IsEnabled" Value="false">
        			<Setter Property="Foreground" Value="#FF9A9A9A"/>
        			<Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
        			<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
        			<Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
        		</Trigger>
        	</ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComponentResourceKey3" TargetType="{x:Type MenuItem}">
        	<Grid SnapsToDevicePixels="true">
        		<Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
        		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
        		<Rectangle x:Name="InnerBorder" Margin="2"/>
        		<DockPanel>
        			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
        			<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
        			<ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        		</DockPanel>
        		<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
        			<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
        				<ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
        					<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
        						<Grid RenderOptions.ClearTypeHint="Enabled">
        							<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
        								<Rectangle Fill="{StaticResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
        							</Canvas>
        							<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
        						</Grid>
        					</ScrollViewer>
        				</ContentControl>
        			</Microsoft_Windows_Themes:SystemDropShadowChrome>
        		</Popup>
        	</Grid>
        	<ControlTemplate.Triggers>
        		<Trigger Property="IsSuspendingPopupAnimation" Value="true">
        			<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
        		</Trigger>
        		<Trigger Property="Icon" Value="{x:Null}">
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="IsChecked" Value="true">
        			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
        			<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
        			<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
        		</Trigger>
        		<Trigger Property="IsHighlighted" Value="true">
        			<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
        			<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
        		</Trigger>
        		<Trigger Property="IsKeyboardFocused" Value="true">
        			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
        			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
        		</Trigger>
        		<Trigger Property="IsSubmenuOpen" Value="true">
        			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
        			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
        		</Trigger>
        		<Trigger Property="IsEnabled" Value="false">
        			<Setter Property="Foreground" Value="#FF9A9A9A"/>
        			<Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
        		</Trigger>
        	</ControlTemplate.Triggers>
        </ControlTemplate>
        <DataTemplate x:Key="DataTemplate_Menu">
        	<Grid/>
        </DataTemplate>
        <ControlTemplate x:Key="ComponentResourceKey4" TargetType="{x:Type MenuItem}">
        	<Grid SnapsToDevicePixels="true">
        		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
        		<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
        		<Grid>
        			<Grid.ColumnDefinitions>
        				<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
        				<ColumnDefinition Width="4"/>
        				<ColumnDefinition Width="*"/>
        				<ColumnDefinition Width="37"/>
        				<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
        				<ColumnDefinition Width="17"/>
        			</Grid.ColumnDefinitions>
        			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
        			<Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
        				<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
        			</Border>
        			<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        			<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}"/>
        		</Grid>
        	</Grid>
        	<ControlTemplate.Triggers>
        		<Trigger Property="Icon" Value="{x:Null}">
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="IsChecked" Value="true">
        			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="IsHighlighted" Value="true">
        			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}"/>
        			<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
        		</Trigger>
        		<Trigger Property="IsEnabled" Value="false">
        			<Setter Property="Foreground" Value="#FF9A9A9A"/>
        			<Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
        			<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
        			<Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
        		</Trigger>
        	</ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComponentResourceKey5" TargetType="{x:Type MenuItem}">
        	<Grid SnapsToDevicePixels="true">
        		<Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
        		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
        		<Rectangle x:Name="InnerBorder" Margin="2"/>
        		<DockPanel>
        			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
        			<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
        			<ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        		</DockPanel>
        		<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
        			<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
        				<ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
        					<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
        						<Grid RenderOptions.ClearTypeHint="Enabled">
        							<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
        								<Rectangle Fill="{StaticResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
        							</Canvas>
        							<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
        						</Grid>
        					</ScrollViewer>
        				</ContentControl>
        			</Microsoft_Windows_Themes:SystemDropShadowChrome>
        		</Popup>
        	</Grid>
        	<ControlTemplate.Triggers>
        		<Trigger Property="IsSuspendingPopupAnimation" Value="true">
        			<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
        		</Trigger>
        		<Trigger Property="Icon" Value="{x:Null}">
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="IsChecked" Value="true">
        			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
        			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
        		</Trigger>
        		<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
        			<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
        			<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
        		</Trigger>
        		<Trigger Property="IsHighlighted" Value="true">
        			<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
        			<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
        		</Trigger>
        		<Trigger Property="IsKeyboardFocused" Value="true">
        			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
        			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
        		</Trigger>
        		<Trigger Property="IsSubmenuOpen" Value="true">
        			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
        			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
        			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
        		</Trigger>
        		<Trigger Property="IsEnabled" Value="false">
        			<Setter Property="Foreground" Value="#FF9A9A9A"/>
        			<Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
        		</Trigger>
        	</ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="MenuItemStyle_MenuItemSecond" TargetType="{x:Type MenuItem}">
        	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        	<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        	<Style.Triggers>
        		<Trigger Property="Role" Value="TopLevelHeader">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="TopLevelItem">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuHeader">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuItem">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        		</Trigger>
        	</Style.Triggers>
        </Style>
        <Style x:Key="MenuItemStyle_MenuSencond" TargetType="{x:Type MenuItem}">
        	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        	<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        	<Style.Triggers>
        		<Trigger Property="Role" Value="TopLevelHeader">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="TopLevelItem">
        			<Setter Property="Padding" Value="7,2,8,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuHeader">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        		</Trigger>
        		<Trigger Property="Role" Value="SubmenuItem">
        			<Setter Property="Padding" Value="2,3,2,3"/>
        		</Trigger>
        	</Style.Triggers>
        </Style>
    </Window.Resources>
	<Window.DataContext>
		<Binding Source="{StaticResource MainWindow_VMDataSource}"/>
	</Window.DataContext>
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Closing">
            <cmd:EventToCommand Command="{Binding CmdExit, Mode=OneWay}" PassEventArgsToCommand="True"/>
		</i:EventTrigger>
	</i:Interaction.Triggers>
    <Grid>
        <Grid.Resources>
            <HierarchicalDataTemplate x:Key="ChildTreeViewTemplate">
                <HierarchicalDataTemplate.Resources>
                    <Storyboard x:Key="Storyboard1">
                        <ColorAnimationUsingKeyFrames RepeatBehavior="Forever"  Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="p">
                            <EasingColorKeyFrame KeyTime="0:0:0" Value="#FF4E4E4E"/>
                            <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#FFD40B0B"/>
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </HierarchicalDataTemplate.Resources>
                <Canvas Height="18">
                    <!--Canvas.ContextMenu>
                        <ContextMenu >
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Cut}" Command="{x:Static my:SmartLCTControl.CutCommand}" />
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Copy}" Command="{x:Static my:SmartLCTControl.CopyCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Paste}" Command="{x:Static my:SmartLCTControl.PasteCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Clear}" Command="{x:Static my:SmartLCTControl.ClearCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_SelectedAll}" Command="{x:Static my:SmartLCTControl.SelecteAllCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_CancelSelectedAll}" Command="{x:Static my:SmartLCTControl.CancelSelectedAllCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Delete}" Command="{x:Static my:SmartLCTControl.DeleteCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_ClearLine}" Command="{x:Static my:SmartLCTControl.ClearLineCommand}"/>
                        </ContextMenu>
                    </Canvas.ContextMenu-->
                    <localInterface:MyTreeViewPortButton Name="myPort" BorderBrush="Black" BorderThickness="0.5"  Canvas.Left="0" Canvas.Top="0" Width="{x:Static localInterface:SmartLCTViewModeBase.PortMaxLoadSize}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                <cmd:EventToCommand Command="{Binding CmdSelectedTreeViewValueWithPort, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </localInterface:MyTreeViewPortButton>
                    <StackPanel Canvas.Left="{x:Static localInterface:SmartLCTViewModeBase.PortMaxLoadSize}" Canvas.Top="1" Orientation="Horizontal">
                        <TextBlock Text="{DynamicResource Lang_SmartLCT_MainWin_MaxLoadSize}" Foreground="White"></TextBlock>
                        <TextBlock Text="{Binding MaxLoadArea,Converter={StaticResource sizeConvertString}}" Foreground="White"></TextBlock>
                        <TextBlock Text="{DynamicResource Lang_SmartLCT_MainWin_CurrentLoadSize}" Foreground="White"></TextBlock>
                        <TextBlock Text="{Binding LoadSize,Converter={StaticResource rectConvertString}}" Foreground="White"></TextBlock>
                    </StackPanel>                
                </Canvas>
     
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="TreeViewTemplate" ItemsSource="{Binding PortConnectInfoList}" ItemTemplate="{StaticResource ChildTreeViewTemplate}">
            	<HierarchicalDataTemplate.Resources>
                    <Storyboard x:Key="Storyboard1">
                        <ColorAnimationUsingKeyFrames RepeatBehavior="Forever"  Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="p">
                            <EasingColorKeyFrame KeyTime="0:0:0" Value="#FF4E4E4E"/>
                            <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#FFD40B0B"/>
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </HierarchicalDataTemplate.Resources>
                <Canvas Height="18">
                    <!--Canvas.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Cut}" Command="{x:Static my:SmartLCTControl.CutCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Copy}" Command="{x:Static my:SmartLCTControl.CopyCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Paste}" Command="{x:Static my:SmartLCTControl.PasteCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Clear}" Command="{x:Static my:SmartLCTControl.ClearCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_SelectedAll}" Command="{x:Static my:SmartLCTControl.SelecteAllCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Delete}" Command="{x:Static my:SmartLCTControl.DeleteCommand}"/>
                        </ContextMenu>
                    </Canvas.ContextMenu-->
                    <localInterface:MyTreeViewSenderButton VerticalAlignment="Stretch"  BorderBrush="Black" Canvas.Left="0" Canvas.Top="0"  Name="mySendekr"  Background="Green" Width="{x:Static localInterface:SmartLCTViewModeBase.SenderMaxLoadSize}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                <cmd:EventToCommand Command="{Binding CmdSelectedTreeViewValueWithSender, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </localInterface:MyTreeViewSenderButton>
                    <StackPanel Canvas.Left="{x:Static localInterface:SmartLCTViewModeBase.SenderMaxLoadSize}" Canvas.Top="1" Orientation="Horizontal">
                        <TextBlock Text="{DynamicResource Lang_SmartLCT_MainWin_MaxLoadSize}" Foreground="White"></TextBlock>
                        <TextBlock Text="{Binding MaxLoadArea,Converter={StaticResource sizeConvertString}}" Foreground="White"></TextBlock>
                        <TextBlock Text="{DynamicResource Lang_SmartLCT_MainWin_CurrentLoadSize}" Foreground="White"></TextBlock>
                        <TextBlock Text="{Binding LoadSize,Converter={StaticResource rectConvertString}}" Foreground="White"></TextBlock>
                    </StackPanel>
                        <localInterface:WarnControl Visibility="Hidden" Height="18"  Canvas.Left="380" Canvas.Top="1"  Name="p" Background="#FF4E4E4E" Width="30">
                        <localInterface:WarnControl.ToolTip>
                            <ToolTip Content="{Binding IsOverLoad,Converter={StaticResource isOverLoadConvertStr},ConverterParameter=Tooltipdaizai}">
                            </ToolTip>
                        </localInterface:WarnControl.ToolTip>
                    </localInterface:WarnControl>

                </Canvas>
                <HierarchicalDataTemplate.Triggers>      	          
                </HierarchicalDataTemplate.Triggers>
            </HierarchicalDataTemplate>

            <Style TargetType="{x:Type localInterface:MyLockAndVisibleButton}">
                <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}"/>
                <Setter Property="IsLocked" Value="{Binding IsLocked, Mode=TwoWay}"/>
                <Setter Property="Visible" Value="{Binding Visible, Mode=TwoWay}"/>
                <Setter Property="Element" Value="{Binding}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type localInterface:MyLockAndVisibleButton}">
            
                            <DockPanel>     
                                <TextBlock Foreground="{Binding IsOverLoad,Converter={StaticResource isOverLoadConvertColor}}"  Text="{Binding IsOverLoad, Converter={StaticResource isOverLoadConvertStr},ConverterParameter=Foredaizai}"></TextBlock>
                                <TextBlock Foreground="{Binding IsOverLoad,Converter={StaticResource isOverLoadConvertColor}}"  Text="{Binding LoadSize,Converter={StaticResource rectConvertString}}" DockPanel.Dock="Left"></TextBlock>
                            </DockPanel>                         
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <DataTemplate x:Key="DataTemplate_SenderTypeList">
                <Grid>
                    <!--<Image HorizontalAlignment="Left" Visibility="Hidden"  Width="34" Height="30" Margin="0"  Source="{Binding SenderPicturePath, Mode=TwoWay}"/>-->
                    <TextBlock Foreground="White" Margin="0,0,0,0" TextWrapping="Wrap" Text="{Binding SenderTypeName, Mode=TwoWay}" d:LayoutOverrides="Height" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                </Grid>
            </DataTemplate>
            <Style x:Key="ListBoxItemStyle_SenderType" TargetType="{x:Type ListBoxItem}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="2,0,0,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Storyboard1"/>
                            </ControlTemplate.Resources>
                            <Border x:Name="Bd" BorderBrush="#FF6E6E6E" BorderThickness="0,1,0,0" SnapsToDevicePixels="true" Background="#FF4F4F4F"  Padding="0,5">
                                <ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                                    <Setter Property="Background" TargetName="Bd" Value="#FF6E6E6E"/>
                                    <!--<Setter Property="OpacityMask" TargetName="contentPresenter" Value="Black"/>-->
                                </Trigger>
                                <!--<Trigger Property="Selector.IsSelected" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
                                    </Trigger.EnterActions>
                                    <Setter Property="OpacityMask" TargetName="contentPresenter" Value="#FF4F4F4F"/>
                                </Trigger>-->
                                <!--<MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                    <Setter Property="Background" TargetName="Bd" Value="#FF6E6E6E"/>
                                    <Setter Property="OpacityMask" TargetName="contentPresenter" Value="#FF6E6E6E"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="false"/>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd"  Value="#FF6E6E6E"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd"  Value="#FF6E6E6E"/>
                                </MultiTrigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



        </Grid.Resources>
    	<Grid.DataContext>
    		<Binding Source="{StaticResource MainWindow_VMDataSource}"/>
    	</Grid.DataContext>
        
        <Grid Margin="1.5,0,-0.5,-4" d:LayoutOverrides="GridBox">
            <Grid.ColumnDefinitions>
            	<ColumnDefinition Width="4.3*"/>
            	<ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height ="60"/>
            	<RowDefinition Height ="850*"/>
            	<RowDefinition Height="135"/>
            </Grid.RowDefinitions>
            <GridSplitter Width="2"  Grid.Column="1" Grid.Row="1" 
                  Background="#FF989A9A" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                  ShowsPreview="True"
                  Grid.RowSpan="2" IsEnabled="{Binding IsControlEnabled, Mode=TwoWay}" Margin="0"/>
            <GridSplitter Height="2"  Grid.Column="0" Grid.Row="2"
                  Background="#FF989A9A" HorizontalAlignment="Stretch" VerticalAlignment="Top"
                  ShowsPreview="True"
                  Grid.ColumnSpan="1" IsEnabled="{Binding IsControlEnabled, Mode=TwoWay}"/>
            <Grid Margin="0" Grid.Column="0" Grid.Row="1" Background="#FF232426">
                <TabControl Background="#FF232426" TabStripPlacement="Left" Style="{DynamicResource TabControlStyle_MainWinow_Environment}"  SelectedIndex="{Binding SelectedEnvironMentIndex,Mode=TwoWay}" ItemContainerStyle="{DynamicResource TabItemStyle1}" BorderBrush="{x:Null}">
                    <TabItem Header="{DynamicResource Lang_SmartLCT_MainWin_ScannerConnect}" Focusable="{Binding IsControlEnabled, Mode=TwoWay}" RenderTransformOrigin="0,0" Margin="25.1,0,-61.7,-31.727" VerticalAlignment="Bottom" d:LayoutOverrides="VerticalAlignment" FontSize="13.333" Height="28">
        				<TabItem.RenderTransform>
        					<TransformGroup>
        						<ScaleTransform/>
        						<SkewTransform/>
        						<RotateTransform Angle="90"/>
        						<TranslateTransform/>
        					</TransformGroup>
        				</TabItem.RenderTransform>
        				<Grid Background="#FF232426" Margin="-6,-9,0,0">
        					<Grid.RowDefinitions>
        						<RowDefinition Height="0.067*"/>
        						<RowDefinition Height="0.933*"/>
        					</Grid.RowDefinitions>
                            <TabControl  SelectedValue="{Binding SelectedValue, Mode=TwoWay}" SelectedIndex="{Binding SelectedIndex,Mode=TwoWay}"  x:Name="tabControl1" ItemsSource="{Binding MyScreen.ElementCollection, Mode=TwoWay}" Background="#FF14141C" Margin="0" BorderBrush="#FF585858" Grid.RowSpan="2"  ItemTemplate="{DynamicResource DataTemplate_tabHeader}" ItemsPanel="{DynamicResource ItemsPanelTemplate_tabHeader}" Style="{DynamicResource TabControlStyle_tabHeader}">
        						
                                <TabControl.ContentTemplate>
        							<DataTemplate>
                                        <my:SmartLCTControl MyRectLayer="{Binding}" SmartLCTActionManager="{Binding MyActionManager,Mode=TwoWay}"/>
        							</DataTemplate>
        						</TabControl.ContentTemplate>
        					</TabControl>
        				</Grid>
        			</TabItem>
                    <TabItem  Header="{DynamicResource Lang_SmartLCT_MainWin_ScrMapping}" Margin="24.701,0,-91.701,-93.346" RenderTransformOrigin="0,0" Height="28" VerticalAlignment="Bottom" Focusable="{Binding IsControlEnabled, Mode=TwoWay}" FontSize="13.333" Foreground="Black">
                    	<TabItem.Background>
                    		<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    			<GradientStop Color="#FFF3F3F3" Offset="0"/>
                    			<GradientStop Color="#FFEBEBEB" Offset="0.5"/>
                    			<GradientStop Color="#FFDDDDDD" Offset="1"/>
                    			<GradientStop Color="#FF14CDCD" Offset="1"/>
                    		</LinearGradientBrush>
                    	</TabItem.Background>
        				<TabItem.RenderTransform>
        					<TransformGroup>
        						<ScaleTransform/>
        						<SkewTransform/>
        						<RotateTransform Angle="90"/>
        						<TranslateTransform/>
        					</TransformGroup>
        				</TabItem.RenderTransform>
                        <Grid Background="#FF14141C" Margin="-6,-9,-2,-3">
                            <my:SmartLCTControl MyRectLayer="{Binding ScreenLocationRectLayer}"  SmartLCTActionManager="{Binding MyActionManager,Mode=TwoWay}" Background="Black"></my:SmartLCTControl>
                        </Grid>
                    </TabItem>
        		</TabControl>
        	</Grid>
            <ScrollViewer Grid.Column="1" Margin="4.25,0,3.5,4" Grid.Row="1" Grid.RowSpan="2"  ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" IsEnabled="{Binding IsControlEnabled, Mode=TwoWay}" Background="#FF303435" Template="{DynamicResource ScrollViewerControlTemplate_Center}">
                <Grid  DataContext="{Binding Source={StaticResource SmartLCTControlDataSource}}" Height="Auto" Width="Auto">
            		<Grid.RowDefinitions>
                        <RowDefinition Height="Auto"></RowDefinition>
            			<RowDefinition Height="Auto"/>
            			<RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Nova_SmartLCT_UI:ScreenMapLocationPropertyPanel FocusManager.IsFocusScope="True" Foreground="#FFDCDCDC"  CurrentScreen="{Binding CurrentScreen,Mode=TwoWay}"  CheckSenderIndex="{Binding CheckSenderIndex,Mode=TwoWay}"  ScreenMapRealParams="{Binding ScreenMapRealParametersValue,Mode=TwoWay}" DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}" SmartLCTActionManager="{Binding SmartLCTActionManager, Mode=TwoWay, Source={StaticResource SmartLCTControlDataSource}}" Visibility="{Binding ScreenMapLocationVisible, Mode=TwoWay}"  HorizontalAlignment="Stretch"  VerticalAlignment="Stretch"  Grid.Row="0" ></Nova_SmartLCT_UI:ScreenMapLocationPropertyPanel>

                    <Nova_SmartLCT_UI:SenderPropertyPanel Grid.Row="2"  VerticalAlignment="Stretch"  FocusManager.IsFocusScope="True"  Margin="0,13,5,0" SenderRealParams="{Binding SenderRealParametersValue, Mode=TwoWay}"  DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}" Visibility="{Binding SenderVisible, Mode=TwoWay}" Foreground="#FFDCDCDC" SmartLCTActionManager="{Binding SmartLCTActionManager, Mode=TwoWay, Source={StaticResource SmartLCTControlDataSource}}"></Nova_SmartLCT_UI:SenderPropertyPanel>
                    <Nova_SmartLCT_UI:ScreenPropertyPanel FocusManager.IsFocusScope="True"  VerticalAlignment="Stretch"  Margin="0,5,5,0" Grid.Row="3" DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}" SelectedScannerConfig="{Binding SelectedScannerConfigInfo,Mode=TwoWay}"  SelectedArrangeType="{Binding SelectedArrangeType,Mode=TwoWay}" IsConnectLine="{Binding IsConnectLine,Mode=TwoWay}"  ScreenRealParams="{Binding ScreenRealParametersValue, Mode=TwoWay}" Visibility="{Binding ScreenVisible,Mode=TwoWay}" CurrentSenderConfigInfo="{Binding CurrentSenderConfigInfo,Mode=TwoWay}"  ScannerCofigCollection="{Binding ScannerTypeCollection, Mode=TwoWay}" SenderConfigCollection="{Binding SenderConfigCollection,Mode=TwoWay}"  SmartLCTActionManager="{Binding SmartLCTActionManager, Mode=TwoWay, Source={StaticResource SmartLCTControlDataSource}}" IncreaseOrDecreaseIndex="{Binding IncreaseOrDecreaseIndex,Mode=TwoWay}" SenderAndPortPicCollection="{Binding SenderAndPortPicCollection,Mode=TwoWay}"  Foreground="#FFDCDCDC"/>
        
                    <TextBlock   Text="{DynamicResource Lang_SmartLCT_PleaseSelElment}" Margin="9.25,0,6,4.167" Visibility="{Binding PleaseSelElmentVisible, Mode=TwoWay, Source={StaticResource MainWindow_VMDataSource}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFDCDCDC">                              
                    </TextBlock>
            	
                    <Nova_SmartLCT_UI:ScanBoardPropertyPanel FocusManager.IsFocusScope="True" Margin="0,0,5,2" VerticalAlignment="Stretch"  Grid.Row="4" DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}" ScannerRealParams="{Binding ScannerRealParametersValue, Mode=TwoWay}" Visibility="{Binding ScanVisible, Mode=TwoWay}" SmartLCTActionManager="{Binding SmartLCTActionManager, Mode=TwoWay, Source={StaticResource SmartLCTControlDataSource}}" Foreground="#FFDCDCDC"/>
                    <Nova_SmartLCT_UI:CustomScanBdPropertyPanel FocusManager.IsFocusScope="True"  Margin="0,0,5,2" VerticalAlignment="Stretch"  Grid.Row="5" DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}" ScannerRealParams="{Binding ScannerRealParametersValue, Mode=TwoWay}" SmartLCTActionManager="{Binding SmartLCTActionManager, Mode=TwoWay, Source={StaticResource SmartLCTControlDataSource}}" Visibility="{Binding CustomScanVisible, Mode=TwoWay}" Foreground="#FFDCDCDC"/>
                </Grid>
            </ScrollViewer>
            <Grid Margin="0,4,0,0" Grid.Row="2" Grid.Column="0">
            	<Grid.RowDefinitions>
            		<RowDefinition Height="25"/>
            		<RowDefinition/>
            	</Grid.RowDefinitions>
                <Grid Margin="0" IsEnabled="{Binding IsControlEnabled, Mode=TwoWay}" Background="#FF303435">
                    <Button Content="{DynamicResource Lang_Global_Send}" Margin="8,0,100,1" d:LayoutOverrides="VerticalAlignment, GridBox" Width="80" HorizontalAlignment="Right" Command="{Binding CmdShowSendDisplayInfoDlg, Mode=OneWay}"/>
                    <Button Content="{DynamicResource Lang_Global_Save}" Margin="8,0,5,1"  d:LayoutOverrides="VerticalAlignment, GridBox" Width="80" HorizontalAlignment="Right" Command="{Binding CmdSaveSysConfigFile, Mode=OneWay}"/>
                </Grid>
                <Grid Margin="0" Grid.Row="1" Background="#FF414244">
                    <TreeView Grid.Column="0" FocusManager.IsFocusScope="True" ItemsSource="{Binding MyScreen.SenderConnectInfoList, Mode=TwoWay}" ItemTemplate="{DynamicResource TreeViewTemplate}" x:Name="treeview1" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Background="{x:Null}" Margin="0" BorderThickness="0,0.6,0,0" BorderBrush="#FF989A9A">
                		<TreeView.ItemContainerStyle>
                			<Style TargetType="{x:Type TreeViewItem}">
                				<Setter Property="IsExpanded" Value="{Binding IsExpand, Mode=TwoWay}" />
                				<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"  />
                				<Setter Property="FontWeight" Value="Normal" />
                				<Style.Triggers>
                					<Trigger Property="IsSelected" Value="True">
                						<Setter Property="FontWeight" Value="ExtraBold" />
                             
                					</Trigger>
                				</Style.Triggers>
                			</Style>
                		</TreeView.ItemContainerStyle>
                	</TreeView>
                </Grid>
            </Grid>

            <Grid Grid.Column="1" HorizontalAlignment="Left" Height="0" Margin="42.25,137,0,0" VerticalAlignment="Top" Width="3"/>
            <Grid Grid.ColumnSpan="2" Margin="0,0,0,0.885" IsEnabled="{Binding IsControlEnabled, Mode=TwoWay}" Background="#FF232426">
            	<Grid.RowDefinitions>
            		<RowDefinition/>
            		<RowDefinition Height="0.12"/>
            		<RowDefinition/>
            	</Grid.RowDefinitions>
                <Menu Grid.Row="0" Foreground="White" Background="#FF4F4F4F">
            		<MenuItem Header="{DynamicResource Lang_SmartLCT_File}" ItemContainerStyle="{DynamicResource MenuItemStyleParent}" ItemTemplate="{DynamicResource DataTemplate_Menu}">
                        <MenuItem Header="{DynamicResource Lang_SmartLCT_NewLayer}" ItemContainerStyle="{DynamicResource MenuItemStyleParent}" Style="{DynamicResource MenuItemStyle_MenuSencond}">
                            <MenuItem Header="{DynamicResource Lang_StartWindow_NewEmptyProject}" Command="{Binding CmdNewEmptyProject}"></MenuItem>
                            <MenuItem Header="{DynamicResource Lang_StartWindow_NewWizard}" Command="{Binding CmdNewWizard}"></MenuItem>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_MainWin_NewScreen}" Command="{Binding CmdMenuNewLayer}"></MenuItem>
                        </MenuItem>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_OpenConfigFile}" Command="{Binding CmdOpenConfigFile}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Close}" Command="{Binding CmdClose}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Save}" Command="{Binding CmdSaveSysConfigFile}"/>
                        <!--<MenuItem Header="{DynamicResource Lang_Global_SaveAs}" Command="{Binding CmdOtherSaveSysConfigFile}"/>-->
                        <MenuItem Header="{DynamicResource Lang_SmartLCT_Exit}" Command="{Binding CmdExit}"/>
            		</MenuItem>
            		<MenuItem Header="{DynamicResource Lang_SmartLCT_Edit}">
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Cut}" Command="{x:Static my:SmartLCTControl.CutCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Copy}" Command="{x:Static my:SmartLCTControl.CopyCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Paste}" Command="{x:Static my:SmartLCTControl.PasteCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Delete}" Command="{x:Static my:SmartLCTControl.DeleteCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_SelectedAll}" Command="{x:Static my:SmartLCTControl.SelecteAllCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_CancelSelectedAll}" Command="{x:Static my:SmartLCTControl.CancelSelectedAllCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Clear}" Command="{x:Static my:SmartLCTControl.ClearCommand}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_ClearLine}" Command="{x:Static my:SmartLCTControl.ClearLineCommand}"/>      			
            		</MenuItem>
            		<MenuItem Header="{DynamicResource Lang_SmartLCT_Tool}">
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_SystemCheckDlg}" Command="{Binding CmdShowSystemCheckDlg, Mode=OneWay}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_ScanBoardConfigManager}" Command="{Binding CmdShowScanBoardConfigManager, Mode=OneWay}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_EDIDManager}" Command="{Binding CmdShowEDIDManager, Mode=OneWay}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_BrightAdjust}" Command="{Binding CmdShowBrightAdjust, Mode=OneWay}"/>
            		</MenuItem>
            		<MenuItem Header="{DynamicResource Lang_SmartLCT_Plugin}">
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_TestTool}" Command="{Binding CmdStartTestTool, Mode=OneWay}"/>
            			<MenuItem Header="{DynamicResource Lang_SmartLCT_Calculator}" Command="{Binding CmdStartCalculator, Mode=OneWay}"/>
            		</MenuItem>
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_Language}" ItemsSource="{Binding LangItemCollection}" ItemTemplate="{DynamicResource DT_LangItem}" ItemContainerStyle="{DynamicResource Sty_LangMenuItem}"/>
            		<MenuItem Header="{DynamicResource Lang_SmartLCT_Help}">
                        <!--<MenuItem Header="{DynamicResource Lang_SmartLCT_Skin}">
            			</MenuItem>-->
            		</MenuItem>
            	</Menu>
            	<Grid Grid.Row="2" Margin="0,0,0,-1.5" Background="{x:Null}">
            		<Grid.RowDefinitions>
            			<RowDefinition Height="auto"/>
                        <RowDefinition Height="6"/>
            		</Grid.RowDefinitions>
					<Grid Margin="0" Background="#FF585858">
                    <ToolBar FocusManager.IsFocusScope="True"  HorizontalAlignment="Left" x:Name="toolBar_File" Grid.Row="0" Grid.Column="0" Background="{x:Null}">
                            <Button x:Name="button_New" Content="{DynamicResource Lang_SmartLCT_MainWin_New}"  Command="{Binding CmdMenuNewLayer}" Width="32"  HorizontalAlignment="Left" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_NewScreen}"></ToolTip>
                                </Button.ToolTip>
                                    <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/New.png"/>
            				</Button.Background>
            				<i:Interaction.Behaviors>
            					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
            						<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/New.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
            						<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/New.png"/>
            						</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
            						<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/New.png"/>
            						</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
            					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
            				</i:Interaction.Behaviors>
            			</Button>
                            <Button x:Name="button_OpenFile" Content="{DynamicResource Lang_SmartLCT_MainWin_Open}" HorizontalAlignment="Left"  Command="{Binding CmdOpenConfigFile}" Width="32"  Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_OpenFile}"></ToolTip>
                                </Button.ToolTip>
                                    <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Open.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Open.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Open.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Open.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_save" Content="{DynamicResource Lang_SmartLCT_MainWin_Save}"  Command="{Binding CmdSaveSysConfigFile}"  Width="32" HorizontalAlignment="Left" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Save}"></ToolTip>
                                </Button.ToolTip>
                                    <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Save.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Save.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Save.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Save.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_sendToHw" Content="{DynamicResource Lang_Global_SendToHardware}" Width="32" HorizontalAlignment="Left" VerticalAlignment="Stretch"  Command="{Binding CmdShowSendDisplayInfoDlg, Mode=OneWay}" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_Global_SendToHardware}"></ToolTip>
                                </Button.ToolTip>
                            <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/SendToHW.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/SendToHW.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/SendToHW.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/SendToHW.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                        
            		</ToolBar>
                    <ToolBar FocusManager.IsFocusScope="True" x:Name="toolBar_Edit" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" Margin="130,0,0,0" Width="Auto" VerticalAlignment="Stretch" Background="{x:Null}" BorderBrush="{x:Null}">
                            <Button x:Name="button_UnDo" Content="{DynamicResource Lang_SmartLCT_MainWin_Undo}"  Command="{x:Static my:SmartLCTControl.UnDoCommand}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Undo}"></ToolTip>
                                </Button.ToolTip>
                                    <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/UnDo.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/UnDo.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/UnDo.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/UnDo.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_ReDo" Content="{DynamicResource Lang_SmartLCT_MainWin_Redo}"  Command="{x:Static my:SmartLCTControl.ReDoCommand}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Redo}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ReDo.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ReDo.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/ReDo.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/ReDo.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_Cut1" Content="{DynamicResource Lang_SmartLCT_MainWin_Cut}"  Command="{x:Static my:SmartLCTControl.CutCommand}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Cut}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Cut.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Cut.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Cut.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Cut.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_Copy" Content="{DynamicResource Lang_SmartLCT_MainWin_Copy}"  Command="{x:Static my:SmartLCTControl.CopyCommand}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Copy}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                <ImageBrush  ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Copy.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Copy.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Copy.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Copy.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_Paste" Content="{DynamicResource Lang_SmartLCT_MainWin_Paste}"  Command="{x:Static my:SmartLCTControl.PasteCommand}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Paste}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Paste.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Paste.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Paste.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Paste.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_Delete" Content="{DynamicResource Lang_SmartLCT_MainWin_Delete}"   Command="{x:Static my:SmartLCTControl.DeleteCommand}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Delete}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Delete.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Delete.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Delete.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Delete.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_ClearLine" Content="{DynamicResource Lang_SmartLCT_MainWin_ClearLine}"  Command="{x:Static my:SmartLCTControl.ClearLineCommand}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_ClearLine}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ClearLine.png"/>
                            </Button.Background>
                            <i:Interaction.Behaviors>
                                <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <ImageBrush ImageSource ="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ClearLine.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/ClearLine.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/ClearLine.png"/>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            </i:Interaction.Behaviors>
                        </Button>
                            <Button x:Name="button_Increased" Content="{DynamicResource Lang_SmartLCT_MainWin_Enlarge}" Command="{x:Static my:SmartLCTControl.IncreaseCommand}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Enlarge}"></ToolTip>
                                </Button.ToolTip>
                    			<Button.Background>
                    				<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Increase.png"/>
                    			</Button.Background>
                    			<i:Interaction.Behaviors>
                    				<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                    					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                    						<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Increase.png"/>
                    					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                    					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                    						<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Increase.png"/>
                    					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                    					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                    						<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Increase.png"/>
                    					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                    				</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                    			</i:Interaction.Behaviors>
                    		</Button>
                            <Button x:Name="button_Decrease" Content="{DynamicResource Lang_SmartLCT_MainWin_Reduce}" Command="{x:Static my:SmartLCTControl.DecreaseCommand}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Reduce}"></ToolTip>
                                </Button.ToolTip>
                    			<Button.Background>
                    				<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Decrease.png"/>
                    			</Button.Background>
                    			<i:Interaction.Behaviors>
                    				<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                    					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                    						<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Decrease.png"/>
                    					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                    					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                    						<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Decrease.png"/>
                    					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                    					<Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                    						<ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Decrease.png"/>
                    					</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                    				</Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                    			</i:Interaction.Behaviors>
                    		</Button>            
                            <Button x:Name="button_orignalSize" Command="{x:Static my:SmartLCTControl.OrginalSizeCommand}"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Foreground="#FFFFFFFF"  Width="32" Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_OriginalSize}"></ToolTip>
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/OriginalSize.png"/>
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/OriginalSize.png"/>
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/OriginalSize.png"/>
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/OriginalSize.png"/>
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                        </ToolBar>
					</Grid>
                    <Grid Grid.Row="1"/>
            	</Grid>
            </Grid>
        </Grid>
    </Grid>
</localInterface:CustomWindow>
