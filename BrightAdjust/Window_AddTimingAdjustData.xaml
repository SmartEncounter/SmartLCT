<Nova_SmartLCT_Interface:CustomWindow
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"   
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"  
	xmlns:myNumericUD="clr-namespace:Nova.Wpf.Control;assembly=Nova.Wpf.Control.NumericUpDown"   
    xmlns:localInterface="clr-namespace:Nova.SmartLCT.Interface;assembly=Nova.SmartLCT.Interface.CommonData"   
	xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"    
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"      
    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"   
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:local="clr-namespace:Nova.SmartLCT.UI" 
    xmlns:Nova_SmartLCT_Interface="clr-namespace:Nova.SmartLCT.Interface;assembly=Nova.SmartLCT.Interface.CommonData" 
    xmlns:Xceed_Wpf_Toolkit_Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit" mc:Ignorable="d"   
	x:Class="Nova.SmartLCT.UI.Window_AddTimingAdjustData"
	x:Name="Window"
	Title="{DynamicResource Lang_Bright_AddSmartBrightTitle}"
	Width="420" Closed="Window_Closed" Background="#FF303435" SizeToContent="Height" ResizeMode="NoResize" Foreground="Black" Height="404" WindowStyle="None" AllowsTransparency="True">

	<Nova_SmartLCT_Interface:CustomWindow.Resources>
        <Nova_SmartLCT_Interface:EnumBoolConverter x:Key="EnumBoolConverter"/>
        <Nova_SmartLCT_Interface:SmartBrightModeAndBoolConverter x:Key="SmartBrightModeAndBoolConverter"/>
		<Nova_SmartLCT_Interface:RepetitionStateVisibilityConverter x:Key="RepetitionStateVisibilityConverter"/>
		<Nova_SmartLCT_Interface:IsTrueConvertIsFalse x:Key="IsTrueConvertIsFalse1"/>
		<Nova_SmartLCT_Interface:IsTrueConvertIsFalse x:Key="IsTrueConvertIsFalse"/>
		<Nova_SmartLCT_Interface:AdjustBrightModeConvertIsSelected x:Key="AdjustBrightModeConvertIsSelected"/>
		<local:Window_AddTimingAdjustData_VM x:Key="Window_AddTimingAdjustData_VMDataSource" d:IsDataSource="True"/>
		<DataTemplate x:Key="DataTemplate_TimePeriod">
			<Grid Width="Auto">
				<!--<TextBlock Margin="0,0,0,4.163" TextWrapping="Wrap" Text="{Binding TimePeriodDisplay, Mode=TwoWay}" d:LayoutOverrides="Width, Height"/>-->
				<TextBlock Margin="0.5" TextWrapping="Wrap" Text="{Binding TimePeriodDisplay, Mode=TwoWay}" d:LayoutOverrides="Width, Height" Foreground="Gainsboro" Padding="0"/>
			</Grid>
		</DataTemplate>

		<ControlTemplate x:Key="ScrollViewerControlTemplate_Center" TargetType="{x:Type ScrollViewer}">
			<Grid x:Name="Grid" Background="{TemplateBinding Background}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="*"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<Rectangle x:Name="Corner" Grid.Column="1" Fill="#FF303435" Grid.Row="1"/>
				<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
				<ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
				<ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
			</Grid>
		</ControlTemplate>
		<Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="true" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border BorderBrush="#FF6F7374"  BorderThickness="0,1,0,0">
							<Border Background="{DynamicResource MyScrollTruckBackground}" BorderBrush="#FF202123" BorderThickness="0,0,0,1"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarThumbv" TargetType="{x:Type Thumb}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border BorderBrush="#FF4A4B4D" BorderThickness="1,0,0,0">
							<Border Background="{DynamicResource MyScrollTruckBackgroundv}" BorderBrush="#FF202123" BorderThickness="0,0,1,0"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="HorizontalScrollBarBackground" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="Black" Offset="1"/>
			<GradientStop Color="#FF2C2D31"/>
			<GradientStop Color="#FF3E4042" Offset="0.083"/>
			<GradientStop Color="#FF303435" Offset="0.923"/>
			<GradientStop Color="#FF303435" Offset="0.104"/>
		</LinearGradientBrush>

		<LinearGradientBrush x:Key="MyScrollTruckBackground" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="Black" Offset="1"/>
			<GradientStop Color="#FF545454"/>
			<GradientStop Color="#FF4D4E4E" Offset="0.08"/>
			<GradientStop Color="#FF303435" Offset="0.98"/>
			<GradientStop Color="#FF303435" Offset="0.075"/>
			<GradientStop Color="#FF4A4C4D"/>

		</LinearGradientBrush>
		<LinearGradientBrush x:Key="MyScrollTruckBackgroundv" EndPoint="0.5,1" StartPoint="0.5,0">
			<GradientStop Color="Black" Offset="1"/>
			<GradientStop Color="#FF545454"/>
			<GradientStop Color="#FF4D4E4E" Offset="0.08"/>
			<GradientStop Color="#FF303435" Offset="0.98"/>
			<GradientStop Color="#FF303435" Offset="0.075"/>
			<GradientStop Color="#FF4A4C4D"/>
		</LinearGradientBrush>
		<Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="SButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineUp" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="0"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineLeft" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="-90"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineRight" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0,1">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" Fill="Black">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="90"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style  TargetType="{x:Type ScrollBar}">
			<Setter Property="Background" Value="#FF303435"/>
			<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
			<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollBar}">
						<Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
							<Grid.RowDefinitions>
								<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
								<RowDefinition Height="0.00001*"/>
								<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
							</Grid.RowDefinitions>
							<Button Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="UpArrow" Style="{DynamicResource ButtonStyle_ScrollBarLineUp}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}"/>
							<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
								<Track.DecreaseRepeatButton>
									<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
								</Track.DecreaseRepeatButton>
								<Track.IncreaseRepeatButton>
									<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
								</Track.IncreaseRepeatButton>
								<Track.Thumb>
									<Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper"/>
								</Track.Thumb>
							</Track>
							<Button x:Name="repeatButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{DynamicResource ButtonStyle_ScrollBarLineDown}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="DownArrow" Margin="0,0,0,-1" Background="#FF303435" BorderBrush="{x:Null}" BorderThickness="0.5"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" TargetName="Bg" Value="Gray"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="Orientation" Value="Horizontal">
					<Setter Property="Width" Value="Auto"/>
					<Setter Property="MinWidth" Value="0"/>
					<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
					<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>

					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ScrollBar}">
								<Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
									<Grid.ColumnDefinitions>
										<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
										<ColumnDefinition Width="0.00001*"/>
										<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
									</Grid.ColumnDefinitions>
									<Button Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Style="{DynamicResource ButtonStyle_ScrollBarLineLeft}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"/>
									<Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
										<Track.DecreaseRepeatButton>
											<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
										</Track.DecreaseRepeatButton>
										<Track.IncreaseRepeatButton>
											<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
										</Track.IncreaseRepeatButton>
										<Track.Thumb>
											<Thumb Style="{StaticResource ScrollBarThumbv}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
										</Track.Thumb>
									</Track>
									<Button Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}"  Style="{DynamicResource ButtonStyle_ScrollBarLineRight}" Background="#FF303435" BorderThickness="0.5" BorderBrush="{x:Null}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"/>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Background" TargetName="Bg" Value="gray"/>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ButtonStyle_ScrollBarLineDown" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderThickness="0,0.5" BorderBrush="Black">
							<ed:RegularPolygon Height="6" InnerRadius="1" PointCount="3" Stretch="Fill" Width="8" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Margin="5,0,0,0" Fill="Black" HorizontalAlignment="Left">
								<ed:RegularPolygon.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="180"/>
										<TranslateTransform/>
									</TransformGroup>
								</ed:RegularPolygon.RenderTransform>
							</ed:RegularPolygon>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>





		<Style x:Key="ComboBoxToggleButton2" TargetType="{x:Type ToggleButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="ClickMode" Value="Press"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Microsoft_Windows_Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RoundCorners="false" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"/>
						</Microsoft_Windows_Themes:ButtonChrome>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="ComboBoxItemStyle_TimePeriod" TargetType="{x:Type ComboBoxItem}">
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="3,0,3,0"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ComboBoxItem}">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsHighlighted" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		<Style x:Key="bButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="bButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#F3F3F3" Offset="0"/>
			<GradientStop Color="#EBEBEB" Offset="0.5"/>
			<GradientStop Color="#DDDDDD" Offset="0.5"/>
			<GradientStop Color="#CDCDCD" Offset="1"/>
		</LinearGradientBrush>
		<SolidColorBrush x:Key="bButtonNormalBorder" Color="#FF707070"/>
		<Style TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource bButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource bButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource bButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border x:Name="border" BorderBrush="Black" BorderThickness="1" CornerRadius="3">
							<Border.Background>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">



									<GradientStop Color="#FF3995DE" Offset="0"/>
									<GradientStop Color="#FF057AD7" Offset="1"/>
									<GradientStop Color="#FF057AD7" Offset="0.525"/>
									<GradientStop Color="#FF3995DE" Offset="0.495"/>
								</LinearGradientBrush>
							</Border.Background>
							<TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" TargetName="border">
									<Setter.Value>
										<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
											<GradientStop Color="#FF75ECF2" Offset="0"/>
											<GradientStop Color="#FF19E0E7" Offset="1"/>
											<GradientStop Color="#FF19E0E7" Offset="0.5"/>
											<GradientStop Color="#FF75ECF2" Offset="0.495"/>
										</LinearGradientBrush>
									</Setter.Value>
								</Setter>
							</Trigger>
							<Trigger Property="IsKeyboardFocused" Value="true"/>
							<Trigger Property="ToggleButton.IsChecked" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<ItemsPanelTemplate x:Key="ItemsPanelTemplate_GuideTwoReceiveSize">
			<StackPanel IsItemsHost="True" Background="#FF4B4B4B"/>
		</ItemsPanelTemplate>
		<DataTemplate x:Key="DataTemplate_GuideTwoReceiveSize">
			<Grid Width="Auto"/>
		</DataTemplate>
		<ItemsPanelTemplate x:Key="ItemsPanelTemplate_GuideTwo_ReceiveSize">
			<StackPanel IsItemsHost="True" Background="#FF4B4B4B"/>
		</ItemsPanelTemplate>
		<Style x:Key="ComboBoxItemStyle_GuideTwo_ReceiveSize" TargetType="{x:Type ComboBoxItem}">
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="3,0,3,0"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ComboBoxItem}">
						<Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Width="Auto">
							<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsHighlighted" Value="true">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
								<!--<Setter Property="Width" TargetName="Bd" Value="255"/>-->
								<Setter Property="Background" TargetName="Bd" Value="#FF373B3C"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ComboBoxFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#F3F3F3" Offset="0"/>
			<GradientStop Color="#EBEBEB" Offset="0.5"/>
			<GradientStop Color="#DDDDDD" Offset="0.5"/>
			<GradientStop Color="#CDCDCD" Offset="1"/>
		</LinearGradientBrush>
		<SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
		<Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
		<Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="ClickMode" Value="Press"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Grid Width="Auto" Background="{TemplateBinding Background}">
							<Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
								<Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
							</Grid>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
			<GradientStop Color="#ABADB3" Offset="0.05"/>
			<GradientStop Color="#E2E3EA" Offset="0.07"/>
			<GradientStop Color="#E3E9EF" Offset="1"/>
		</LinearGradientBrush>
		<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="AllowDrop" Value="true"/>
			<Setter Property="MinWidth" Value="0"/>
			<Setter Property="MinHeight" Value="0"/>
			<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
			<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
			<Grid x:Name="Placement" SnapsToDevicePixels="true">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
					<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Placement}">
						<Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
							<ScrollViewer x:Name="DropDownScrollViewer">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
										<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
									</Canvas>
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</Grid>
							</ScrollViewer>
						</Border>
					</Microsoft_Windows_Themes:SystemDropShadowChrome>
				</Popup>
				<Microsoft_Windows_Themes:ListBoxChrome x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"/>
				<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
				<ToggleButton Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton2}"/>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsKeyboardFocusWithin" Value="true">
					<Setter Property="Foreground" Value="Black"/>
				</Trigger>
				<Trigger Property="IsDropDownOpen" Value="true">
					<Setter Property="RenderFocused" TargetName="Border" Value="true"/>
				</Trigger>
				<Trigger Property="HasItems" Value="false">
					<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
					<Setter Property="Background" Value="#FFF4F4F4"/>
				</Trigger>
				<Trigger Property="IsGrouping" Value="true">
					<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
				</Trigger>
				<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
					<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
					<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
				</Trigger>
				<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
					<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
					<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
		<Style x:Key="ComboBoxStyle_GuideTwo" TargetType="{x:Type ComboBox}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
			<Setter Property="Padding" Value="4,3"/>
			<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
			<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ComboBox}">
						<Grid x:Name="MainGrid" SnapsToDevicePixels="true">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
							</Grid.ColumnDefinitions>
							<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
								<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
									<Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
										<ScrollViewer x:Name="DropDownScrollViewer">
											<Grid RenderOptions.ClearTypeHint="Enabled">
												<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
													<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
												</Canvas>
												<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
											</Grid>
										</ScrollViewer>
									</Border>
								</Microsoft_Windows_Themes:SystemDropShadowChrome>
							</Popup>
							<ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxReadonlyToggleButton}" Foreground="Gainsboro"/>
							<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
								<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
								<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
							</Trigger>
							<Trigger Property="HasItems" Value="false">
								<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								<Setter Property="Background" Value="#FFF4F4F4"/>
							</Trigger>
							<Trigger Property="IsGrouping" Value="true">
								<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
							</Trigger>
							<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
								<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
								<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsEditable" Value="true">
					<Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
					<Setter Property="IsTabStop" Value="false"/>
					<Setter Property="Padding" Value="3"/>
					<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ListBoxItemStyle_TimePeriod" TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="2,0,0,0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListBoxItem}">
						<ControlTemplate.Resources>
							<Storyboard x:Key="Storyboard1"/>
						</ControlTemplate.Resources>
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" Background="#FF4A4A4A" Padding="0,6" Width="Auto">
							<ContentPresenter x:Name="contentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="true">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
								<Setter Property="Background" TargetName="Bd" Value="#FF4A4A4A"/>
								<Setter Property="OpacityMask" TargetName="contentPresenter" Value="Black"/>
							</Trigger>
							<Trigger Property="Selector.IsSelected" Value="False">
								<Trigger.EnterActions>
									<BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
								</Trigger.EnterActions>
								<Setter Property="OpacityMask" TargetName="contentPresenter" Value="#FF504646"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="Selector.IsSelectionActive" Value="false"/>
								</MultiTrigger.Conditions>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
								<Setter Property="Background" TargetName="Bd" Value="#FF4A4A4A"/>
								<Setter Property="OpacityMask" TargetName="contentPresenter" Value="Black"/>
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>                      
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="false"/>
									<Condition Property="IsMouseOver" Value="true"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd"  Value="#FF373B3C"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="IsMouseOver" Value="true"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd"  Value="#FF373B3C"/>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
			<Setter Property="Width" Value="8"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Cursor" Value="SizeWE"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="DataGridColumnHeaderStyle_AutoAdjust" TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
						<Grid>
							<Microsoft_Windows_Themes:DataGridHeaderBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsClickable="{TemplateBinding CanUserSort}" IsPressed="{TemplateBinding IsPressed}" IsHovered="{TemplateBinding IsMouseOver}" Padding="{TemplateBinding Padding}" SortDirection="{TemplateBinding SortDirection}" SeparatorBrush="{TemplateBinding SeparatorBrush}" SeparatorVisibility="{TemplateBinding SeparatorVisibility}" Background="#FF303435">
								<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center"/>
							</Microsoft_Windows_Themes:DataGridHeaderBorder>
							<Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" Foreground="Gainsboro"/>
							<Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" Foreground="Gainsboro"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>
		<Style x:Key="DataGridCellStyle_AutoAdjust" TargetType="{x:Type DataGridCell}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridCell}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
							<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" OpacityMask="Black"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsSelected" Value="True">
					<Setter Property="Background" Value="#FFA0A0A0"/>
					<!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
					<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
				</Trigger>
				<Trigger Property="IsKeyboardFocusWithin" Value="True">
					<!--<Setter Property="BorderBrush" Value="Red"/>
                    <Setter Property="Background" Value="Blue"/>
                    <Setter Property="Foreground" Value="Black"/>-->
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="DataGridRowStyle_autoadjust" TargetType="{x:Type DataGridRow}">
			<Setter Property="Background" Value="#FF4B4B4B"/>
			<Setter Property="SnapsToDevicePixels" Value="true"/>
			<Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
			<Setter Property="ValidationErrorTemplate">
				<Setter.Value>
					<ControlTemplate>
						<TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" FontWeight="Bold"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridRow}">
						<Border x:Name="DGR_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" Background="#FF4B4B4B">
							<SelectiveScrollingGrid>
								<SelectiveScrollingGrid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</SelectiveScrollingGrid.ColumnDefinitions>
								<SelectiveScrollingGrid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</SelectiveScrollingGrid.RowDefinitions>
								<DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								<DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}"/>
								<DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Background="#FF4B4B4B"/>
							</SelectiveScrollingGrid>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ContentPresenterStyle1" TargetType="{x:Type ContentPresenter}"/>


		<Style x:Key="TimePickerStyle_common" TargetType="{x:Type xctk:TimePicker}">
			<Setter Property="WatermarkTemplate">
				<Setter.Value>
					<DataTemplate>
						<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0"/>
					</DataTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="IsTabStop" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type xctk:TimePicker}">
						<Border>
							<Grid>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="Auto"/>
									</Grid.ColumnDefinitions>
									<xctk:DateTimeUpDown x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="1,1,0,1" Background="{TemplateBinding Background}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" ContextMenu="{TemplateBinding ContextMenu}" FormatString="{TemplateBinding FormatString}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" TextAlignment="{TemplateBinding TextAlignment}" Text="" TabIndex="{TemplateBinding TabIndex}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}" BorderBrush="{x:Null}" Style="{DynamicResource DateTimeUpDownStyle_auto}" Foreground="Gainsboro">
										<xctk:DateTimeUpDown.Format>
											<TemplateBinding Property="Format">
												<TemplateBinding.Converter>
													<xctk:TimeFormatToDateTimeFormatConverter/>
												</TemplateBinding.Converter>
											</TemplateBinding>
										</xctk:DateTimeUpDown.Format>
									</xctk:DateTimeUpDown>
									<ToggleButton x:Name="_timePickerToggleButton" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}" Background="{x:Null}">
										<ToggleButton.IsHitTestVisible>
											<Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
												<Binding.Converter>
													<xctk:InverseBoolConverter/>
												</Binding.Converter>
											</Binding>
										</ToggleButton.IsHitTestVisible>
										<ToggleButton.Style>
											<Style TargetType="{x:Type ToggleButton}">
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="{x:Type ToggleButton}">
															<Grid SnapsToDevicePixels="True">
																<xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0,2.75,2.75,0" InnerCornerRadius="0,1.75,1.75,0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}" Background="#FF4B4B4B" BorderThickness="0.5,0.6,0.6,0.5" BorderBrush="#FF576695">
																	<Grid>
																		<Grid.ColumnDefinitions>
																			<ColumnDefinition Width="*"/>
																			<ColumnDefinition Width="Auto"/>
																		</Grid.ColumnDefinitions>
																		<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
																		<Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
																			<Path x:Name="Arrow" Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="Black" Height="4" Width="7"/>
																		</Grid>
																	</Grid>
																</xctk:ButtonChrome>
															</Grid>
															<ControlTemplate.Triggers>
																<Trigger Property="IsEnabled" Value="False">
																	<Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
																</Trigger>
															</ControlTemplate.Triggers>
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</ToggleButton.Style>
									</ToggleButton>
								</Grid>
								<Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" StaysOpen="False">
									<Border BorderThickness="1" Background="#FF4A4A4A">
										<Border.BorderBrush>
											<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
												<GradientStop Color="#FFA3AEB9" Offset="0"/>
												<GradientStop Color="#FF8399A9" Offset="0.375"/>
												<GradientStop Color="#FF718597" Offset="0.375"/>
												<GradientStop Color="#FF617584" Offset="1"/>
											</LinearGradientBrush>
										</Border.BorderBrush>
										<Grid Background="#FF4A4A4A">
											<ListBox x:Name="PART_TimeListItems" ItemContainerStyle="{DynamicResource ListBoxItemStyle_TimePeriod}" BorderThickness="0" DisplayMemberPath="Display" Height="130" Width="{TemplateBinding Width}" Foreground="Gainsboro" Background="#FF4A4A4A" ScrollViewer.VerticalScrollBarVisibility="Visible"/>
										</Grid>
									</Border>
								</Popup>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="False" SourceName="PART_TimeUpDown">
								<Setter Property="Foreground" TargetName="PART_TimeUpDown" Value="#FF767673"/>
							</Trigger>
							<Trigger Property="IsFocused" Value="True">
								<Setter Property="FocusManager.FocusedElement" TargetName="PART_TimeUpDown" Value="{Binding ElementName=PART_TimeUpDown}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="DateTimeUpDownStyle_auto" TargetType="{x:Type xctk:DateTimeUpDown}">
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
			<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Xceed_Wpf_Toolkit_Themes:ResourceKeys}}}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Right"/>
			<Setter Property="TextAlignment" Value="Right"/>
			<Setter Property="WatermarkTemplate">
				<Setter.Value>
					<DataTemplate>
						<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0"/>
					</DataTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="IsTabStop" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type xctk:DateTimeUpDown}">
						<xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
							<xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}" Style="{DynamicResource WatermarkTextBoxStyle_auto}"/>
						</xctk:ButtonSpinner>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True">
								<Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="WatermarkTextBoxStyle_auto" TargetType="{x:Type xctk:WatermarkTextBox}">
			<Setter Property="Foreground" Value="Red"/>
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
			<Setter Property="BorderBrush">
				<Setter.Value>
					<LinearGradientBrush EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
						<GradientStop Color="#FFABADB3" Offset="0.05"/>
						<GradientStop Color="#FFE2E3EA" Offset="0.07"/>
						<GradientStop Color="#FFE3E9EF" Offset="1"/>
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Padding" Value="3"/>
			<Setter Property="AllowDrop" Value="True"/>
			<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
			<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="WatermarkTemplate">
				<Setter.Value>
					<DataTemplate>
						<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False"/>
					</DataTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
						<Grid>
							<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1"/>
							<Border x:Name="MouseOverVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
								<Border.BorderBrush>
									<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
										<GradientStop Color="#FF5794BF" Offset="0.05"/>
										<GradientStop Color="#FFB7D5EA" Offset="0.07"/>
										<GradientStop Color="#FFC7E2F1" Offset="1"/>
									</LinearGradientBrush>
								</Border.BorderBrush>
							</Border>
							<Border x:Name="FocusVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
								<Border.BorderBrush>
									<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
										<GradientStop Color="#FF3D7BAD" Offset="0.05"/>
										<GradientStop Color="#FFA4C9E3" Offset="0.07"/>
										<GradientStop Color="#FFB7D9ED" Offset="1"/>
									</LinearGradientBrush>
								</Border.BorderBrush>
							</Border>
							<ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							<ContentPresenter x:Name="PART_WatermarkHost" ContentTemplate="{TemplateBinding WatermarkTemplate}" Content="{TemplateBinding Watermark}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsFocused" Value="False"/>
									<Condition Property="Text" Value=""/>
								</MultiTrigger.Conditions>
								<Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>
							</MultiTrigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Opacity" TargetName="MouseOverVisual" Value="1"/>
							</Trigger>
							<Trigger Property="IsFocused" Value="True">
								<Setter Property="Opacity" TargetName="FocusVisual" Value="1"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="BorderBrush" TargetName="Border" Value="#FFADB2B5"/>
								<Setter Property="Background" TargetName="Border" Value="#FF4B4B4B"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="TabItemFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="TabControlNormalBorderBrush" Color="#8C8E94"/>
		<LinearGradientBrush x:Key="TabItemHotBackground" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#EAF6FD" Offset="0.15"/>
			<GradientStop Color="#D9F0FC" Offset=".5"/>
			<GradientStop Color="#BEE6FD" Offset=".5"/>
			<GradientStop Color="#A7D9F5" Offset="1"/>
		</LinearGradientBrush>
		<SolidColorBrush x:Key="TabItemSelectedBackground" Color="#F9F9F9"/>
		<SolidColorBrush x:Key="TabItemHotBorderBrush" Color="#3C7FB1"/>
		<SolidColorBrush x:Key="TabItemDisabledBackground" Color="#F4F4F4"/>
		<SolidColorBrush x:Key="TabItemDisabledBorderBrush" Color="#FFC9C7BA"/>
		<Style x:Key="TabItemStyle_ManualAdjustBright" TargetType="{x:Type TabItem}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}"/>
			<Setter Property="Foreground" Value="Black"/>
			<Setter Property="Padding" Value="6,1,6,1"/>
			<Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabItem}">
						<Grid SnapsToDevicePixels="true">
							<Border BorderBrush="Gainsboro" BorderThickness="1,1,1,0" Margin="0,-2,8,0">
								<Grid x:Name="Bd" Background="#FF4B4B4B" Margin="0">
									<Grid.ColumnDefinitions>
										<ColumnDefinition x:Name="columnDefinition" Width="Auto"/>
										<ColumnDefinition x:Name="columnDefinition1" Width="Auto"/>
									</Grid.ColumnDefinitions>
									<ContentPresenter x:Name="Content" ContentSource="Header" HorizontalAlignment="Left" Width="Auto" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Top" Grid.Column="1"/>
									<Image  x:Name="Image_Checked" HorizontalAlignment="Left" VerticalAlignment="Top" Height="18" Width="18" Source="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/New.png"/>
								</Grid>
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true"/>
							<Trigger Property="IsSelected" Value="true">
								<Setter Property="Panel.ZIndex" Value="1"/>
								<Setter Property="Background" TargetName="Bd" Value="#FF057AD7"/>
								<Setter Property="Visibility" TargetName="Image_Checked" Value="Visible"/>
							</Trigger>
							<Trigger Property="IsSelected" Value="false">
								<Setter Property="Visibility" TargetName="Image_Checked" Value="Collapsed"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="false"/>
									<Condition Property="IsMouseOver" Value="true"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background" TargetName="Bd" Value="Gray"/>
								<Setter Property="Visibility" TargetName="Image_Checked" Value="Collapsed"/>
							</MultiTrigger>
							<Trigger Property="TabStripPlacement" Value="Bottom"/>
							<Trigger Property="TabStripPlacement" Value="Left"/>
							<Trigger Property="TabStripPlacement" Value="Right"/>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="TabStripPlacement" Value="Top"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-2,-2,-2,-1"/>
								<Setter Property="Margin" TargetName="Content" Value="0,0,0,1"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="TabStripPlacement" Value="Bottom"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-2,-1,-2,-2"/>
								<Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="TabStripPlacement" Value="Left"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-2,-2,-1,-2"/>
								<Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="TabStripPlacement" Value="Right"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-1,-2,-2,-2"/>
								<Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
							</MultiTrigger>
							
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<BooleanToVisibilityConverter x:Key="bool2VisibilityConverter"/>
		<Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
			<Setter Property="Height" Value="8"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Cursor" Value="SizeNS"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="DataGridRowHeaderStyle_Auto" TargetType="{x:Type DataGridRowHeader}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
						<Grid>
							<Microsoft_Windows_Themes:DataGridHeaderBorder BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsPressed="{TemplateBinding IsPressed}" IsHovered="{TemplateBinding IsMouseOver}" IsSelected="{TemplateBinding IsRowSelected}" Orientation="Horizontal" Padding="{TemplateBinding Padding}" SeparatorBrush="{TemplateBinding SeparatorBrush}" SeparatorVisibility="{TemplateBinding SeparatorVisibility}" BorderThickness="1">
								<StackPanel Orientation="Horizontal">
									<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
									<Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={StaticResource bool2VisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
								</StackPanel>
							</Microsoft_Windows_Themes:DataGridHeaderBorder>
							<Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Top"/>
							<Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Bottom"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="TextBoxStyle_Auto" TargetType="{x:Type TextBox}">
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="Padding" Value="0"/>
			<Setter Property="Foreground" Value="Gainsboro"/>
			<Setter Property="Background" Value="#FFF90000"/>
		</Style>




</Nova_SmartLCT_Interface:CustomWindow.Resources>
	<Window.DataContext>
		<Binding Source="{StaticResource Window_AddTimingAdjustData_VMDataSource}"/>
	</Window.DataContext>

	<Grid x:Name="LayoutRoot" DataContext="{Binding Source={StaticResource Window_AddTimingAdjustData_VMDataSource}}">
		<Grid Margin="5,0">
			<TabControl Background="#FF303435" SelectedIndex="{Binding SelectedAdjustBrightMode, Converter={StaticResource AdjustBrightModeConvertIsSelected}, Mode=TwoWay}" ItemContainerStyle="{DynamicResource TabItemStyle_ManualAdjustBright}">
				<TabItem Header="{DynamicResource Lang_Bright_TimingAdjust}" Margin="0" Foreground="Gainsboro" IsSelected="{Binding SelectedSmartBrightMode, ConverterParameter=FixBright, Converter={StaticResource EnumBoolConverter}}">
					<Grid Height="Auto" VerticalAlignment="Stretch" Margin="0" Background="#FF303435">
						<Grid.RowDefinitions>
							<RowDefinition Height="1*"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="8*"/>
						</Grid.RowDefinitions>
						<Grid HorizontalAlignment="Stretch" Margin="0,0,0,0" Grid.Row="1" VerticalAlignment="Stretch" d:LayoutOverrides="HorizontalAlignment, GridBox" Visibility="{Binding SelectedRepetitionState, Converter={StaticResource RepetitionStateVisibilityConverter}}" Height="50">
							<CheckBox Content="{DynamicResource Lang_Bright_Monday}" IsChecked="{Binding CustomSelectedWeekCollection[1].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="112,0,161,0" VerticalAlignment="Top" Foreground="Gainsboro" HorizontalAlignment="Left"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Tuesday}" IsChecked="{Binding CustomSelectedWeekCollection[2].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="185,0,0,0" VerticalAlignment="Top" Foreground="Gainsboro" HorizontalAlignment="Left"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Wednesday}" IsChecked="{Binding CustomSelectedWeekCollection[3].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Margin="0,0,88,0" VerticalAlignment="Top" Foreground="Gainsboro" Width="52"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Thursday}" IsChecked="{Binding CustomSelectedWeekCollection[4].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" VerticalAlignment="Top" Foreground="Gainsboro" Width="49" Margin="0,0,22,0"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Friday}" IsChecked="{Binding CustomSelectedWeekCollection[5].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="112,0,0,8.625" VerticalAlignment="Bottom" Foreground="Gainsboro" HorizontalAlignment="Left" Width="49"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Saturday}" IsChecked="{Binding CustomSelectedWeekCollection[6].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="185,0,0,8.625" VerticalAlignment="Bottom" Foreground="Gainsboro" HorizontalAlignment="Left"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Sunday}" IsChecked="{Binding CustomSelectedWeekCollection[0].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Margin="0,0,85,8.625" VerticalAlignment="Bottom" Foreground="Gainsboro" Width="56"/>
						</Grid>
						<Grid Margin="0" Grid.Row="2" Height="126" VerticalAlignment="Top">
                            <xctk:TimePicker HorizontalAlignment="Left" Style="{DynamicResource TimePickerStyle_common}"  Margin="111,0,0,0" Width="130" Value="{Binding AdjustTime, Mode=TwoWay}" Height="26" VerticalAlignment="Top" d:LayoutOverrides="VerticalAlignment" Foreground="Gainsboro" Background="#FF4B4B4B" TabIndex="1" IsTabStop="True"/>
							<myNumericUD:NumericUpDown IsSelectedAll="True"  Margin="111,35,0,0" Height="28" VerticalAlignment="Top" HorizontalAlignment="Left" Width="128" Value="{Binding BrightValue, Mode=TwoWay}" Foreground="Gainsboro" Background="#FF4B4B4B" TabIndex="2" IsTabStop="True"/>
							<Button Content="{DynamicResource Lang_Global_OK}" Margin="208,88,0,0" HorizontalAlignment="Left" Height="26" Width="68" Command="{Binding CmdOK, Mode=OneWay}" VerticalAlignment="Top" TabIndex="3"/>
							<Button Content="{DynamicResource Lang_Global_Cancel}" Height="26" Margin="0,88,18,0" VerticalAlignment="Top" RenderTransformOrigin="0.574,0.577" Command="{Binding CmdCancel, Mode=OneWay}" HorizontalAlignment="Right" Width="68" TabIndex="4"/>
							<Label Content="{DynamicResource Lang_Bright_Time}" HorizontalAlignment="Right" VerticalAlignment="Top" d:LayoutOverrides="VerticalAlignment" Margin="0,0,300,0" Foreground="Gainsboro"/>
							<Label Content="{DynamicResource Lang_Bright_Bright}" Margin="0,38,300,0" HorizontalAlignment="Right" VerticalAlignment="Top" Foreground="Gainsboro"/>
						</Grid>
						<Grid Margin="0" Height="42" VerticalAlignment="Bottom">
							<Label Content="{DynamicResource Lang_Bright_TimePeriod}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,6,300,0" Foreground="Gainsboro"/>
							<ComboBox x:Name="Combox_TimePeriod" Margin="111,7,0,0" VerticalAlignment="Top" Width="130" HorizontalAlignment="Left" ItemsSource="{Binding RepetitionStateDataSource}"  ItemsPanel="{DynamicResource ItemsPanelTemplate_GuideTwo_ReceiveSize}" ItemContainerStyle="{DynamicResource ComboBoxItemStyle_GuideTwo_ReceiveSize}" Style="{DynamicResource ComboBoxStyle_GuideTwo}" Background="#FF4B4B4B" TabIndex="0" SelectedValue="{Binding SelectedRepetitionState}" SelectedValuePath="Data" DisplayMemberPath="Name"/>
						</Grid>
					</Grid>
				</TabItem>
				<TabItem Header="{DynamicResource Lang_Bright_AutoAdjust}" Foreground="Gainsboro" IsSelected="{Binding SelectedSmartBrightMode, ConverterParameter=AutoBright, Converter={StaticResource EnumBoolConverter}}">
					<Grid Margin="0" Background="#FF303435">
						<Grid.RowDefinitions>
							<RowDefinition Height="1*"/>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="8*"/>
						</Grid.RowDefinitions>
						<Grid HorizontalAlignment="Stretch" Margin="0,0,0,0" Grid.Row="1" VerticalAlignment="Stretch" d:LayoutOverrides="HorizontalAlignment, GridBox" Height="50" Visibility="{Binding SelectedRepetitionState, Converter={StaticResource RepetitionStateVisibilityConverter}}">
							<CheckBox Content="{DynamicResource Lang_Bright_Monday}" IsChecked="{Binding CustomSelectedWeekCollection[1].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="112,0,161,0" VerticalAlignment="Top" Foreground="Gainsboro" HorizontalAlignment="Left"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Tuesday}" IsChecked="{Binding CustomSelectedWeekCollection[2].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="185,0,0,0" VerticalAlignment="Top" Foreground="Gainsboro" HorizontalAlignment="Left" Width="49"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Wednesday}" IsChecked="{Binding CustomSelectedWeekCollection[3].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Margin="0,0,88,0" VerticalAlignment="Top" Foreground="Gainsboro" Width="52"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Thursday}" IsChecked="{Binding CustomSelectedWeekCollection[4].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Margin="0,0,22,0" VerticalAlignment="Top" Foreground="Gainsboro" Width="49"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Friday}" IsChecked="{Binding CustomSelectedWeekCollection[5].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="112,0,0,8.625" VerticalAlignment="Bottom" Foreground="Gainsboro" HorizontalAlignment="Left" Width="49"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Saturday}" IsChecked="{Binding CustomSelectedWeekCollection[6].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="185,0,0,8.625" VerticalAlignment="Bottom" Foreground="Gainsboro" HorizontalAlignment="Left" Width="53"/>
							<CheckBox Content="{DynamicResource Lang_Bright_Sunday}" IsChecked="{Binding CustomSelectedWeekCollection[0].IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" Margin="0,0,84,8.625" VerticalAlignment="Bottom" Foreground="Gainsboro" Width="56"/>
						</Grid>
						<Grid Grid.Row="2" Height="93.333" VerticalAlignment="Top">
                            <xctk:TimePicker HorizontalAlignment="Left" Style="{DynamicResource TimePickerStyle_common}" Margin="111,0,0,0" Width="130" Value="{Binding AdjustTime, Mode=TwoWay}" Height="26" VerticalAlignment="Top" d:LayoutOverrides="VerticalAlignment" Foreground="Gainsboro" Background="#FF4B4B4B" IsEnabled="{Binding IsSelectedAllHours, Converter={StaticResource IsTrueConvertIsFalse1}, Mode=TwoWay}" TabIndex="1" IsTabStop="True"/>
							<Button Content="{DynamicResource Lang_Global_OK}" Margin="238,0,0,5" HorizontalAlignment="Left" Height="26" Width="68" Command="{Binding CmdOK, Mode=OneWay}" VerticalAlignment="Bottom" TabIndex="4" d:LayoutOverrides="VerticalAlignment"/>
                            <Button Content="{DynamicResource Lang_Global_Cancel}" Height="26" Margin="0,0,10,5" VerticalAlignment="Bottom" RenderTransformOrigin="0.574,0.577" Command="{Binding CmdCancel, Mode=OneWay}" HorizontalAlignment="Right" Width="68" TabIndex="5" d:LayoutOverrides="VerticalAlignment"/>
							<Label Content="{DynamicResource Lang_Bright_Time}" HorizontalAlignment="Right" VerticalAlignment="Top" d:LayoutOverrides="VerticalAlignment" Margin="0,0,300,0" Foreground="Gainsboro"/>
                            <CheckBox x:Name="MyAllHours" Content="{DynamicResource Lang_Bright_AllHours}" Margin="250,8,0,0" VerticalAlignment="Top" Foreground="Gainsboro" HorizontalAlignment="Left" IsChecked="{Binding IsSelectedAllHours, Mode=TwoWay}" TabIndex="2" Visibility="Collapsed"/>
						</Grid>
						<Grid Margin="0" Height="42" VerticalAlignment="Bottom">
							<Label Content="{DynamicResource Lang_Bright_TimePeriod}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,6,300,0" Foreground="Gainsboro"/>
							<ComboBox x:Name="Combox_TimePeriod1" Margin="111,7,0,0" VerticalAlignment="Top" Width="130" HorizontalAlignment="Left" ItemsSource="{Binding RepetitionStateDataSource}"  ItemsPanel="{DynamicResource ItemsPanelTemplate_GuideTwo_ReceiveSize}" ItemContainerStyle="{DynamicResource ComboBoxItemStyle_GuideTwo_ReceiveSize}" Style="{DynamicResource ComboBoxStyle_GuideTwo}" Background="#FF4B4B4B" TabIndex="0" SelectedValue="{Binding SelectedRepetitionState}" SelectedValuePath="Data" DisplayMemberPath="Name"/>
						</Grid>
					</Grid>
				</TabItem>
			</TabControl>
		</Grid>
	</Grid>
</Nova_SmartLCT_Interface:CustomWindow>

<!--{Binding SelectedTimePeriod, Converter={StaticResource TimePeriodConvertVisibile6}, Mode=TwoWay}-->